//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v3.0-03/04/2009 09:20 AM(valikov)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.01.15 at 05:31:23 PM EST 
//

package com.ibm.asset.swkbt.domain;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import com.ibm.tap.sigbank.software.ProductInfo;
import com.ibm.tap.sigbank.framework.common.Constants;

@Entity(name = "Product")
@Table(name = "PRODUCT")
@NamedQueries( {
		@NamedQuery(name = "productById", query = "FROM Product WHERE id = :productId"),
		@NamedQuery(name = "productByIdList", query = "FROM Product WHERE id in ( :ids )"),
		@NamedQuery(name = "products", query = "FROM Product WHERE deleted!=1 and name !='UNKNOWN'"),
		@NamedQuery(name = "productByNameFirstSearch", query = "FROM Product WHERE deleted!=1 and productRole='SOFTWARE_PRODUCT' and upper(name) = :productName"),
		@NamedQuery(name = "nonTadzProductByNameFirstSearch", query = "FROM Product p WHERE p.deleted!=1 and p.productRole='SOFTWARE_PRODUCT' and p.productInfo.remoteUser !='TADZMainframe' and upper(p.name) = :productName"),
		@NamedQuery(name = "productByNameSecondSearch", query = "FROM Product WHERE deleted!=1 and upper(name) = :productName"),
		@NamedQuery(name = "nonTadzProductByNameSecondSearch", query = "FROM Product p WHERE p.deleted!=1 and p.productInfo.remoteUser !='TADZMainframe' and upper(p.name) = :productName"),
		@NamedQuery(name = "productByManufacturer", query = "FROM Product WHERE deleted!=1 and manufacturer= :manufacturer order by upper(name)"),
		@NamedQuery(name = "productBySoftwareCategory", query = "FROM Product WHERE productInfo.softwareCategory = :softwareCategory"),
		@NamedQuery(name = "searchProductByName", query = "FROM Product WHERE deleted!=1 and name !='UNKNOWN' and upper(name) like :search order by upper(name)"),
		@NamedQuery(name = "searchProductByGuid", query = "FROM Product WHERE guid=:guid order by upper(name)"),
		@NamedQuery(name = "searchProductByNameAndCategory", query = "FROM Product WHERE deleted!=1 and name !='UNKNOWN' and productInfo.softwareCategory.softwareCategoryId = :softwareCategoryId and upper(name) like :search order by upper(name)"),
		@NamedQuery(name = "searchProductByNameAndManufacturer", query = "FROM Product WHERE deleted!=1 and name !='UNKNOWN' and  manufacturer.id= :manufacturerId and upper(name) like :search order by upper(name)"),
		@NamedQuery(name = "searchProductByNameManufacturerCategory", query = "FROM Product WHERE deleted!=1 and name !='UNKNOWN' and  manufacturer.id= :manufacturerId and productInfo.softwareCategory.softwareCategoryId = :softwareCategoryId and upper(name) like :search order by upper(name)"),
		@NamedQuery(name = "getMaxCategoryPriority", query = "select max(productInfo.priority) + 1 FROM Product where productInfo.softwareCategory = :softwareCategory and deleted!=1"),
		@NamedQuery(name = "productPriorityOrder", query = "FROM Product where productInfo.softwareCategory = :softwareCategory order by productInfo.priority ASC, productInfo.recordTime DESC") })
public class Product extends SoftwareItem implements Serializable {

	private static final long serialVersionUID = -6616799008517128699L;

	@OneToMany(targetEntity = Alias.class, fetch = FetchType.LAZY)
	@JoinTable(name = "PRODUCT_ALIAS", joinColumns = { @JoinColumn(name = "PRODUCT_ID") }, inverseJoinColumns = { @JoinColumn(name = "ALIAS_ID") })
	private Set<Alias> alias = new HashSet<Alias>();

	@ManyToOne(cascade = { CascadeType.ALL }, fetch = FetchType.EAGER)
	private Manufacturer manufacturer;

	@Basic
	@Column(name = "FUNCTION")
	private String function;

	@Basic
	@Column(name = "PVU")
	private Boolean pvu;

	@Basic
	@Column(name = "LICENSE_TYPE")
	private Integer licenseType;

	@OneToOne(cascade = { CascadeType.ALL }, fetch = FetchType.EAGER)
	@PrimaryKeyJoinColumn
	private ProductInfo productInfo;

	public Set<Alias> getAlias() {
		return alias;
	}

	public void setAlias(Set<Alias> alias) {
		this.alias = alias;
	}

	public Manufacturer getManufacturer() {
		return manufacturer;
	}

	public void setManufacturer(Manufacturer manufacturer) {
		this.manufacturer = manufacturer;
	}

	public String getFunction() {
		return function;
	}

	public void setFunction(String function) {
		this.function = function;
	}

	public Boolean getPvu() {
		return pvu;
	}

	public void setPvu(Boolean pvu) {
		this.pvu = pvu;
	}

	public Integer getLicenseType() {
		return licenseType;
	}

	public void setLicenseType(Integer licenseType) {
		this.licenseType = licenseType;
	}

	public void setProductInfo(ProductInfo productInfo) {
		this.productInfo = productInfo;
	}

	public ProductInfo getProductInfo() {
		return productInfo;
	}

	public String getStatusImage() {
		if (getDeleted())
			return "<img alt=\"" + Constants.INACTIVE + "\" src=\""
					+ Constants.ICON_SYSTEM_STATUS_NA
					+ "\" width=\"12\" height=\"10\"/>";

		else {
			return "<img alt=\"" + Constants.ACTIVE + "\" src=\""
					+ Constants.ICON_SYSTEM_STATUS_OK
					+ "\" width=\"12\" height=\"10\"/>";
		}
	}

}
