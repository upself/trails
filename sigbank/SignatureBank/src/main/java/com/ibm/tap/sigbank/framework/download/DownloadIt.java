package com.ibm.tap.sigbank.framework.download;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;

import com.ibm.tap.sigbank.framework.common.Constants;
import com.ibm.tap.sigbank.framework.common.Util;
import com.ibm.tap.sigbank.signature.SoftwareSignature;
import com.ibm.tap.sigbank.signature.SoftwareSignatureH;

/**
 * A basic servlet that returns a PNG image file generated by JFreeChart.
 * <P>
 * This class is described in the JFreeChart Developer Guide.
 * 
 * @@author David Gilbert
 */
public class DownloadIt extends HttpServlet {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Logger for this class
	 */
	private static final Logger logger = Logger.getLogger(DownloadIt.class);

	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException {

		try {
			List list = null;

			String type = request.getParameter(Constants.ID);
			PrintWriter os = new PrintWriter(response.getOutputStream(), true);

			response.setContentType("application/x-unknown");
			String filename = type + ".tsv";
			response.setHeader("Content-disposition", "attachment; filename=\""
					+ filename + "\"");
			
			os.println(Constants.CONFIDENTIAL);

			if (type.equals(Constants.SOFTWARE_SIGNATURE_BEAN)) {
				list = DownloadDelegate.signatureDownload();
				printList(list, os);
			} else if (type.equals(Constants.SOFTWARE_FILTER_BEAN)) {
				list = DownloadDelegate.filterDownload();
				printList(list, os);
			} else if (type.equals(Constants.INACTIVE_SIGNATURE)) {
				list = DownloadDelegate.inactiveSignatureDownload();

				Iterator i = list.iterator();
				while (i.hasNext()) {
					SoftwareSignature sig = (SoftwareSignature) i.next();
					Set history = sig.getHistory();

					Iterator j = history.iterator();

					if (j.hasNext()) {
						while (j.hasNext()) {
							SoftwareSignatureH sigH = (SoftwareSignatureH) j
									.next();
							os.println(sig.getProduct().getName()
									+ Constants.DELIM_TSV
									+ sig.getSoftwareVersion()
									+ Constants.DELIM_TSV + sig.getFileName()
									+ Constants.DELIM_TSV + sig.getFileSize()
									+ Constants.DELIM_TSV + sig.getRecordTime()
									+ Constants.DELIM_TSV + sig.getRemoteUser()
									+ Constants.DELIM_TSV + sigH.getComments());
						}
					} else {
						os.println(sig.getProduct().getName()
								+ Constants.DELIM_TSV
								+ sig.getSoftwareVersion()
								+ Constants.DELIM_TSV + sig.getFileName()
								+ Constants.DELIM_TSV + sig.getFileSize()
								+ Constants.DELIM_TSV + sig.getRecordTime()
								+ Constants.DELIM_TSV + sig.getRemoteUser()
								+ Constants.DELIM_TSV);
					}
				}
			}
		} catch (IOException e) {
			logger.error("doGet(HttpServletRequest, HttpServletResponse)", e);
		}
	}

	/**
	 * @@param list
	 * @@param os
	 */
	private void printList(List list, PrintWriter os) {
		if (list != null) {
			Iterator i = list.iterator();
			while (i.hasNext()) {
				Object[] row = (Object[]) i.next();
				for (int j = 0; j < row.length; j++) {
					row[j] = "" + row[j];
					if (Util.isBlankString((String) row[j])) {
						row[j] = "";
					}
				}
				os.println(DownloadDelegate.join(row, Constants.DELIM_TSV));
			}
		}
	}
}