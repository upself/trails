<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>

	<query name="countryCodeRollupReport">
		<![CDATA[
			select new com.ibm.ea.bravo.report.DepartmentScanReport(
				b.name
				,a.podId
				,a.podName
				, v.assetType
				, sum(v.swNoScan)
				, sum(v.hwTotal)
				, sum(v.hwSwTotal))
			from
				VGlobalScan v
				join v.customer.pod a
				join v.customer.countryCode b
			where
				b.id = :country
			group by
				b.name
				,a.podId
				,a.podName
				,v.assetType
		]]>
	</query>

	<query name="regionRollupReport">
		<![CDATA[
			select new com.ibm.ea.bravo.report.DepartmentScanReport(
				b.name
				,a.podId
				,a.podName
				, v.assetType
				, sum(v.swNoScan)
				, sum(v.hwTotal)
				, sum(v.hwSwTotal))
			from
				VGlobalScan v
				join v.customer.pod a
				join v.customer.countryCode.region b
			where
				b.id = :region
			group by
				b.name
				,a.podId
				,a.podName
				,v.assetType
		]]>
	</query>

	<query name="geoRollupReport">
		<![CDATA[
			select new com.ibm.ea.bravo.report.DepartmentScanReport(
				b.name
				,a.podId
				,a.podName
				, v.assetType
				, sum(v.swNoScan)
				, sum(v.hwTotal)
				, sum(v.hwSwTotal))
			from
				VGlobalScan v
				join v.customer.pod a
				join v.customer.countryCode.region.geography b
			where
				b.id = :geo
			group by
				b.name
				,a.podId
				,a.podName
				,v.assetType
		]]>
	</query>

	<query name="geoScanReport">
		<![CDATA[
			select new com.ibm.ea.bravo.report.DepartmentScanReport(
				d.id
				,c.id
				,b.id
				,d.name
				, c.name
				, b.name
				, v.assetType
				, sum(v.swNoScan)
				, sum(v.hwTotal)
				, sum(v.hwSwTotal))
			from
				VGlobalScan v
				join v.customer a
				join v.customer.countryCode b
				join v.customer.countryCode.region c
				join v.customer.countryCode.region.geography d
			group by
				d.id
				,c.id
				,b.id
				,d.name
				,c.name
				,b.name
				,v.assetType
		]]>
	</query>

	<query name="departmentScanReport">
		<![CDATA[
			select new com.ibm.ea.bravo.report.DepartmentScanReport(
				a.accountNumber
				, a.customerName
				, b.customerTypeName
				, d.remoteUser
				, c.remoteUser
				, e.outsourceable
				, v.assetType
				, v.swNoScan
				, v.hwTotal
				, v.hwSwTotal
				, v.percentHw)
			from
				VGlobalScan v
				join v.customer a
				left outer join v.customer.contactHW c
				left outer join v.customer.contactSW d
				left outer join v.customer.outsource e
				join v.customer.customerType b
			where
				a.pod = :pod
				and e.assetProcess = 2
				and e.current = '1'
		]]>
	</query>

	<query name="reportHardwareOnlyByCustomer">
		<![CDATA[
			select
				l.customer.accountNumber
				,l.customer.customerName
				,l.customer.customerType.customerTypeName
				,l.customer.pod.podName
				,l.name
				,l.hardware.serial
			from
				HardwareLpar l
			where
				l.customer = :customer
				and l.status = :status
				and (l.hardware.status is null or l.hardware.status = 'ACTIVE')
				and l.softwareLpar is null
		]]>
	</query>

	<query name="reportSoftwareOnlyByCustomer">
		<![CDATA[
			select
				l.customer.accountNumber
				,l.customer.customerName
				,l.customer.customerType.customerTypeName
				,l.customer.pod.podName
				,l.name
				,l.biosSerial
			from 
				com.ibm.ea.bravo.software.SoftwareLpar l
			where
				l.customer = :customer
				and l.status = :status
				and l.hardwareLpar is null
		]]>
	</query>

	<sql-query name="reportDiscrepanciesByCustomer">
		<![CDATA[
			select
				T.accountNumber
				,T.customerName
				,T.customerTypeName
				,T.podName
				,T.lparName
				,T.softwareName
				,T.discrepancyName
				,T.invalidCategory
				,T.remoteUser
				,T.recordTime
				,T.version
				,T.researchFlag
				,sdh.comment
			from (
				select
					c.account_number as accountNumber
					,c.customer_name as customerName
					,ct.customer_type_name as customerTypeName
					,p.pod_name as podName
					,l.name as lparName
					,s.software_name as softwareName
					,dt.name as discrepancyName
					,i.invalid_category as invalidCategory
					,i.remote_user as remoteUser
					,i.record_time as recordTime
					,i.version as version
					,i.research_flag as researchFlag
					,max(h.id) as disc_id
				from
					customer c
					,customer_type ct
					,pod p
					,software_lpar l
					,software s
					,discrepancy_type dt
					,installed_software i
					 left outer join software_discrepancy_h h
						on i.id = h.installed_software_id
				where
					c.customer_id = :customer
					and c.customer_type_id = ct.customer_type_id
					and c.pod_id = p.pod_id
					and l.customer_id = c.customer_id
					and i.software_lpar_id = l.id
					and i.software_id = s.software_id
					and i.discrepancy_type_id = dt.id
					and i.status = :status
				group by
					c.account_number
					,c.customer_name
					,ct.customer_type_name
					,p.pod_name
					,l.name
					,s.software_name
					,dt.name
					,i.invalid_category
					,i.remote_user
					,i.record_time
					,i.version
					,i.research_flag
			) as T
			left outer join software_discrepancy_h sdh on
        		sdh.id = T.disc_id
		]]>
	</sql-query>

	<query name="reportGlobalDiscrepancies">
		<![CDATA[
			select
				i.softwareLpar.customer.accountNumber
				,i.softwareLpar.customer.customerName
				,i.softwareLpar.customer.customerType.customerTypeName
				,i.softwareLpar.customer.pod.podName
				,i.softwareLpar.name
				,i.discrepancyType.name
				,i.remoteUser
				,i.recordTime
				,i.version
				,i.researchFlag
			from 
				com.ibm.ea.bravo.software.InstalledSoftware i
			where
				i.status = :status
				and (
					upper(i.discrepancyType.name) = 'FALSE HIT'
					or upper(i.discrepancyType.name) = 'INVALID'
					or upper(i.discrepancyType.name) = 'MISSING'
					or i.researchFlag = 1
				)
		]]>
	</query>

    <!--Change Bravo to use Software View instead of Product Object Start -->
	<!--<query name="reportDiscrepanciesBySoftware">
		<![CDATA[
			select 
				i.softwareLpar.customer.countryCode.region.geography.name
				,i.softwareLpar.customer.countryCode.region.name
				,i.softwareLpar.customer.countryCode.name
				,i.softwareLpar.customer.accountNumber
				,i.softwareLpar.customer.customerName
				,i.softwareLpar.customer.customerType.customerTypeName
				,i.softwareLpar.customer.pod.podName
				,i.softwareLpar.name
				,i.software.softwareItem.name
				,i.discrepancyType.name
				,i.invalidCategory
				,i.remoteUser
				,i.recordTime
				,i.version
				,i.researchFlag
				,i.software.productInfo.comments
			from 
				com.ibm.ea.bravo.software.InstalledSoftware i
			where
				i.software.id = :software
				and i.status = :status
				and (
					upper(i.discrepancyType.name) = 'FALSE HIT'
					or upper(i.discrepancyType.name) = 'INVALID'
					or upper(i.discrepancyType.name) = 'MISSING'
					or i.researchFlag = 1
				)
			order by
				i.softwareLpar.customer.countryCode.region.geography.name
				,i.softwareLpar.customer.countryCode.region.name
				,i.softwareLpar.customer.countryCode.name
				,i.softwareLpar.customer.customerName
				,i.softwareLpar.customer.customerType.customerTypeName
		]]>
	</query> -->
	
	<query name="reportDiscrepanciesBySoftware">
		<![CDATA[
			select 
				i.softwareLpar.customer.countryCode.region.geography.name
				,i.softwareLpar.customer.countryCode.region.name
				,i.softwareLpar.customer.countryCode.name
				,i.softwareLpar.customer.accountNumber
				,i.softwareLpar.customer.customerName
				,i.softwareLpar.customer.customerType.customerTypeName
				,i.softwareLpar.customer.pod.podName
				,i.softwareLpar.name
				,i.software.softwareName
				,i.discrepancyType.name
				,i.invalidCategory
				,i.remoteUser
				,i.recordTime
				,i.version
				,i.researchFlag
				,i.software.comments
			from 
				com.ibm.ea.bravo.software.InstalledSoftware i
			where
				i.software.softwareId = :software
				and i.status = :status
				and (
					upper(i.discrepancyType.name) = 'FALSE HIT'
					or upper(i.discrepancyType.name) = 'INVALID'
					or upper(i.discrepancyType.name) = 'MISSING'
					or i.researchFlag = 1
				)
			order by
				i.softwareLpar.customer.countryCode.region.geography.name
				,i.softwareLpar.customer.countryCode.region.name
				,i.softwareLpar.customer.countryCode.name
				,i.softwareLpar.customer.customerName
				,i.softwareLpar.customer.customerType.customerTypeName
		]]>
	</query>

   <!-- <query name="discrepancySummaryReport">
		<![CDATA[
			select 
				distinct new com.ibm.ea.bravo.report.DiscrepancySummary(
				i.software.id,
				i.software.softwareItem.name,
				i.discrepancyType.name,
				count(*))
			from 
				com.ibm.ea.bravo.software.InstalledSoftware i
			where 
				i.status = 'ACTIVE' 
				and (upper(i.discrepancyType.name) = 'FALSE HIT' 
					or upper(i.discrepancyType.name) = 'INVALID' 
					or upper(i.discrepancyType.name) = 'MISSING' 
					or i.researchFlag = 1
				)
			group by 
				i.software.id,
				i.software.softwareItem.name,
				i.discrepancyType.name
			order by 
				i.software.softwareItem.name,
				i.discrepancyType.name
			
		]]>
	</query> -->
	
	<query name="discrepancySummaryReport">
		<![CDATA[
			select 
				distinct new com.ibm.ea.bravo.report.DiscrepancySummary(
				i.software.softwareId,
				i.software.softwareName,
				i.discrepancyType.name,
				count(*))
			from 
				com.ibm.ea.bravo.software.InstalledSoftware i
			where 
				i.status = 'ACTIVE' 
				and (upper(i.discrepancyType.name) = 'FALSE HIT' 
					or upper(i.discrepancyType.name) = 'INVALID' 
					or upper(i.discrepancyType.name) = 'MISSING' 
					or i.researchFlag = 1
				)
			group by 
				i.software.softwareId,
				i.software.softwareName,
				i.discrepancyType.name
			order by 
				i.software.softwareName,
				i.discrepancyType.name
			
		]]>
	</query>
	    
	<!--<query name="reportLparsByAccountBySoftware">
		<![CDATA[
			select
				i.softwareLpar.customer.accountNumber
				,i.softwareLpar.customer.customerName
				,i.softwareLpar.customer.customerType.customerTypeName
				,i.softwareLpar.customer.pod.podName
				,i.softwareLpar.name
				,i.software.softwareItem.name
				,i.discrepancyType.name
				,i.remoteUser
				,i.recordTime
				,i.researchFlag
			from 
				com.ibm.ea.bravo.software.InstalledSoftware i
			where
				i.softwareLpar.customer = :customer
				and i.software = :software
				and i.status = :status
		]]>
	</query> -->
	
	<query name="reportLparsByAccountBySoftware">
		<![CDATA[
			select
				i.softwareLpar.customer.accountNumber
				,i.softwareLpar.customer.customerName
				,i.softwareLpar.customer.customerType.customerTypeName
				,i.softwareLpar.customer.pod.podName
				,i.softwareLpar.name
				,i.software.softwareName
				,i.discrepancyType.name
				,i.remoteUser
				,i.recordTime
				,i.researchFlag
			from 
				com.ibm.ea.bravo.software.InstalledSoftware i
			where
				i.softwareLpar.customer = :customer
				and i.software = :software
				and i.status = :status
		]]>
	 </query>
	 <!--Change Bravo to use Software View instead of Product Object End -->

	<sql-query name="reportAccountAsset">
		<![CDATA[
			select 
				customer.account_number as account_number
				,customer.customer_name as customer_name
				,customer_type.customer_type_name as customer_type
				,pod.pod_name as pod_name
				,software_lpar.name as name
				,machine_type.type as type
				,hardware.serial as serial
				,software_lpar.bios_serial as bios_serial
				,case when hardware_lpar.id is null then 'N' 
				 else 'Y' end as hwflag                                    
				,'Y' as swflag
				,hardware.hardware_status as hardware_status
				,machine_type.name as machine_type_name
				,hardware.model as cpu_model
				,hardware.chassis_id as chassis_id
				,hardware.cloud_name as cloud_name
				,hardware.customer_number as customer_number
				,date(software_lpar.scantime) as scan_time
				,COALESCE (hle.processor_count,0) as processor_count
				,hardware.processor_count as hw_processor_count
				,hardware_lpar.effective_threads
				,hardware_lpar.vcpu
				,hardware_lpar.ext_id as hw_ext_id
				,software_lpar.ext_id as sw_ext_id
				,hardware_lpar.TECH_IMAGE_ID as hw_ti_id
				,software_lpar.TECH_IMG_ID as sw_ti_id
				,hardware.chips as chips
				,hardware.server_type as server_type
				,hardware_lpar.os_type as os_type
				,hardware_lpar.spla as SPLA
				,hardware_lpar.virtual_flag as virtualFlag
				,hardware_lpar.virtual_mobility_restriction as vMobilRestrict
				,hardware_lpar.sysplex as sysplex
				,software_lpar.sysplex as mf_sysplex
				,hardware_lpar.cluster_type as clusterType
				,hardware_lpar.backupmethod as backupMethod
				,hardware_lpar.internet_Icc_Flag as internetIccFlag
				,hardware_lpar.capped_lpar as cappedLpar
				,hardware.Mast_Processor_Type as mastProcessorType
				,hardware.processor_Manufacturer as processorManufacturer
				,hardware.processor_Model as processorModel
				,hardware.nbr_Cores_Per_Chip as nbrCoresPerChip
				,hardware.nbr_Of_Chips_Max as nbrOfChipsMax
				,hardware.cpu_ifl
				,hardware.shared_processor
				,hardware.shared as shared
				,hardware.cpu_mips 
				,hardware.CPU_GARTNER_MIPS
				,hardware.cpu_msu 
				,hardware_lpar.part_mips
				,hardware_lpar.PART_GARTNER_MIPS
				,hardware_lpar.part_msu
				,hardware_lpar.lpar_status
			from
				eaadmin.customer as customer
				,eaadmin.customer_type as customer_type
				,eaadmin.pod as pod
				,eaadmin.software_lpar as software_lpar
				left outer join eaadmin.hw_sw_composite as hw_sw_composite on 
					hw_sw_composite.software_lpar_id = software_lpar.id 
				left outer join eaadmin.hardware_lpar as hardware_lpar on 
					hardware_lpar.id = hw_sw_composite.hardware_lpar_id
				left outer join eaadmin.hardware_lpar_eff as hle on
					( hardware_lpar.id = hle.hardware_lpar_id and hle.status = 'ACTIVE' )
				left outer join eaadmin.hardware as hardware on 
					hardware.id = hardware_lpar.hardware_id
				left outer join eaadmin.machine_type as machine_type on 
					hardware.machine_type_id = machine_type.id
			where 
				customer.account_number = :accountNumber
				and customer.customer_type_id = customer_type.customer_type_id
				and customer.pod_id = pod.pod_id
				and customer.customer_id = software_lpar.customer_id
				and software_lpar.status = 'ACTIVE'
				and ( hardware.id is null OR hardware.hardware_status <> 'REMOVED' )
				and ( hardware_lpar.id is null OR hardware_lpar.status in ('ACTIVE', 'INACTIVE', 'HWCOUNT', 'ON-HOLD'))
			union
			select 
				customer.account_number as account_number
				,customer.customer_name as customer_name
				,customer_type.customer_type_name as customer_type
				,pod.pod_name as pod_name
				,hardware_lpar.name as name
				,machine_type.type as type
				,hardware.serial as serial
				,'' as bios_serial
				,'Y' as hwflag                                    
				,'N' as swflag
				,hardware.hardware_status as hardware_status
				,machine_type.name as machine_type_name
				,hardware.model as cpu_model
				,hardware.chassis_id as chassis_id
				,hardware.cloud_name as cloud_name
				,hardware.customer_number as customer_number
				,date(nullif(1,1)) as scan_time
				,0 as processor_count
				,hardware.processor_count as hw_processor_count
				,hardware_lpar.effective_threads
				,hardware_lpar.vcpu
				,hardware_lpar.ext_id as hw_ext_id
				,'' as sw_ext_id
				,hardware_lpar.TECH_IMAGE_ID as hw_ti_id
				,'' as sw_ti_id
				,hardware.chips as chips
				,hardware.server_type as server_type
				,hardware_lpar.os_type as os_type
				,hardware_lpar.spla as SPLA
				,hardware_lpar.virtual_flag as virtualFlag
				,hardware_lpar.virtual_mobility_restriction as vMobilRestrict
				,hardware_lpar.sysplex as sysplex
				,'' as mf_sysplex
				,hardware_lpar.cluster_type  as clusterType
				,hardware_lpar.backupmethod  as backupMethod
				,hardware_lpar.internet_Icc_Flag as internetIccFlag
				,hardware_lpar.capped_lpar as cappedLpar
				,hardware.Mast_Processor_Type as mastProcessorType
				,hardware.processor_Manufacturer as processorManufacturer
				,hardware.processor_Model as processorModel
				,hardware.nbr_Cores_Per_Chip as nbrCoresPerChip
				,hardware.nbr_Of_Chips_Max as nbrOfChipsMax
				,hardware.cpu_ifl
				,hardware.shared_processor
				,hardware.shared as shared
				,hardware.cpu_mips 
                ,hardware.CPU_GARTNER_MIPS
				,hardware.cpu_msu 
				,hardware_lpar.part_mips
				,hardware_lpar.PART_GARTNER_MIPS
                ,hardware_lpar.part_msu
				,hardware_lpar.lpar_status
			from
				eaadmin.customer as customer
				,eaadmin.customer_type as customer_type
				,eaadmin.pod as pod
				,eaadmin.hardware_lpar as hardware_lpar
				,eaadmin.hardware as hardware
				,eaadmin.machine_type as machine_type
			where 
				customer.account_number = :accountNumber
				and customer.customer_type_id = customer_type.customer_type_id
				and customer.pod_id = pod.pod_id
				and hardware_lpar.hardware_id = hardware.id
				and customer.customer_id = hardware_lpar.customer_id
				and hardware.machine_type_id = machine_type.id
				and hardware_lpar.status = 'ACTIVE'
				and hardware.hardware_status <> 'REMOVED'
				and hardware.status in ('ACTIVE', 'INACTIVE', 'HWCOUNT', 'ON-HOLD')
				and not exists( select 1 from hw_sw_composite a where a.hardware_lpar_id = hardware_lpar.id )
			union
			select 
				customer.account_number as account_number
				,customer.customer_name as customer_name
				,customer_type.customer_type_name as customer_type
				,pod.pod_name as pod_name
				,'No LPAR' as name
				,machine_type.type as type
				,hardware.serial as serial
				,'' as bios_serial
				,'Y' as hwflag
				,'N' as swflag
				,hardware.hardware_status as hardware_status
				,machine_type.name as machine_type_name
				,hardware.model as cpu_model
				,hardware.chassis_id as chassis_id
				,hardware.cloud_name as cloud_name
				,hardware.customer_number as customer_number
				,date(nullif(1,1)) as scan_time
				,0 as processor_count
				,0 as hw_processor_count
				,0 as effective_threads
				,0 as vcpu
				,'' as hw_ext_id
				,'' as sw_ext_id
				,'' as hw_ti_id
				,'' as sw_ti_id
				,0 as chips
				,'' as server_type
				,'' as os_type
				,'' as SPLA
				,'' as virtualFlag
				,'' as vMobilRestrict
				,'' as sysplex
				,'' as mf_sysplex
				,'' as clusterType
				,'' as backupMethod
				,'' as internetIccFlag
				,'' as cappedLpar
				,hardware.Mast_Processor_Type as mastProcessorType
				,hardware.processor_Manufacturer as processorManufacturer
				,hardware.processor_Model as processorModel
				,hardware.nbr_Cores_Per_Chip as nbrCoresPerChip
				,hardware.nbr_Of_Chips_Max as nbrOfChipsMax
				,hardware.cpu_ifl
				,hardware.shared_processor
				,hardware.shared as shared
				,hardware.cpu_mips 
                ,hardware.CPU_GARTNER_MIPS
				,hardware.cpu_msu 
				,0 as part_mips
				,0 as PART_GARTNER_MIPS
                ,0 as part_msu
				,'' as lpar_status
			from
				eaadmin.customer as customer
				,eaadmin.customer_type as customer_type
				,eaadmin.pod as pod
				,eaadmin.hardware as hardware
				,eaadmin.machine_type as machine_type
			where
				customer.account_number = :accountNumber
				and customer.customer_type_id = customer_type.customer_type_id
				and customer.pod_id = pod.pod_id
				and hardware.machine_type_id = machine_type.id
				and customer.customer_id = hardware.customer_id
				and hardware.hardware_status <> 'REMOVED'
				and not exists( select 1 from hardware_lpar a where a.hardware_id = hardware.id )
		]]>
	</sql-query>

	<sql-query name="reportGlobalSummary">
		<![CDATA[
			select
				sum(hw_sw) as hw_sw
				,sum(hw_only) as hw_only
				,sum(sw_only) as sw_only
				,sum(sw_discrep_none) as sw_discrep_none
				,sum(sw_discrep) as sw_discrep
				,account_id
				,account_name
				,account_type
				,account_dept
				,account_status
			from
			(
			select
				sum(case when hwl.id is not null and hwl.status = 'ACTIVE' and hwsw.id is not null then 1 else 0 end) as hw_sw
				,sum(case when hwl.id is not null and hwl.status = 'ACTIVE' and hwsw.id is null then 1 else 0 end) as hw_only
				,0 as sw_only
				,0 as sw_discrep_none
				,0 as sw_discrep
				,c.account_number as account_id
				,c.customer_name as account_name
				,t.customer_type_name as account_type
				,p.pod_name as account_dept
				,c.status as account_status
			from
				customer_type t
				,pod p
				,customer c
				 left outer join hardware_lpar hwl on c.customer_id = hwl.customer_id
				 left outer join hardware hw on hwl.hardware_id = hw.id
				 left outer join hw_sw_composite hwsw on hwl.id = hwsw.hardware_lpar_id
			where
				c.customer_type_id = t.customer_type_id
				and c.pod_id = p.pod_id
				and (hwl.status is null or hwl.status = 'ACTIVE')
				and (hw.status is null or hw.status = '' or hw.status = 'ACTIVE')
			group by
				c.account_number
				,c.customer_name
				,t.customer_type_name
				,p.pod_name
				,c.status

			union all

			select
				0 as hw_sw
				,0 as hw_only
				,count(distinct case when swl.id is not null and swl.status = 'ACTIVE' and hwsw.id is null then swl.id else null end) as sw_only
				,sum(case when discrepancy_type_id = 1 then 1 else 0 end) as sw_discrep_none
				,sum(case when sw.id is not null then 1 else 0 end) as sw_discrep
				,c.account_number as account_id
				,c.customer_name as account_name
				,t.customer_type_name as account_type
				,p.pod_name as account_dept
				,c.status as account_status
			from
				customer_type t
				,pod p
				,customer c
					left outer join software_lpar swl on c.customer_id = swl.customer_id
					left outer join hw_sw_composite hwsw on swl.id = hwsw.software_lpar_id
					left outer join installed_software sw on swl.id = sw.software_lpar_id
			where
				c.customer_type_id = t.customer_type_id
				and c.pod_id = p.pod_id
				and (swl.status is null or swl.status = 'ACTIVE')
				and (sw.status is null or sw.status = 'ACTIVE')
			group by
				c.account_number
				,c.customer_name
				,t.customer_type_name
				,p.pod_name
				,c.status
			) as t
			group by
				account_id
				,account_name
				,account_type
				,account_dept
				,account_status
		]]>
	</sql-query>

<!-- The following does not appear to be used much and old software table is very
intricately weaved into the SQL. Don to research if it is still used and update
it if it to a BATCH report as this is a BIG stressor of the system.  -->

	<sql-query name="mainFrameScanReport">
		<![CDATA[
			select
				c.account_number
			    , c.customer_name
			    , ct.customer_type_name
			    , sl.name
			    , sl.bios_serial
			    , h.serial
			    , sl.scantime
			    , s.software_name
			    , m.name
			    , s.level
			from
			    customer c
			    ,customer_type ct
			    ,country_code cc
			    ,software_lpar sl
			    ,hw_sw_composite hsc
			    ,hardware_lpar hl
			    ,hardware h
			    ,installed_software is
			    ,software s
			    ,manufacturer m
			    ,installed_vm_product ivp
			where
			    c.status = 'ACTIVE'
			    and c.SW_LICENSE_MGMT = 'YES'
			    and cc.code = 'US'
			    and c.customer_type_id = ct.customer_type_id
			    and cc.id = c.country_code_id
			    and sl.customer_id = c.customer_id
			    and hsc.software_lpar_id = sl.id
			    and hsc.hardware_lpar_id = hl.id
			    and h.id = hl.hardware_id
			    and s.software_id = is.software_id
			    and is.software_lpar_id = sl.id
			    and m.id = s.manufacturer_id
			    and s.level = 'LICENSABLE'
			    and ivp.installed_software_id = is.id
			    and is.status = 'ACTIVE'
			    and is.discrepancy_type_id = 1
			union
			select
			    c.account_number
			    , c.customer_name
			    , ct.customer_type_name
			    , sl.name
			    , sl.bios_serial
			    , h.serial
			    , sl.scantime
			    , s.software_name
			    , m.name
			    , s.level
			from
			    customer c
			    ,customer_type ct
			    ,country_code cc
			    ,software_lpar sl
			    ,hw_sw_composite hsc
			    ,hardware_lpar hl
			    ,hardware h
			    ,installed_software is
			    ,software s
			    ,manufacturer m
			    ,installed_sa_product isp
			where
			        c.status = 'ACTIVE'
			        and c.SW_LICENSE_MGMT = 'YES'
			        and cc.code = 'US'
			        and c.customer_type_id = ct.customer_type_id
			        and cc.id = c.country_code_id
			        and sl.customer_id = c.customer_id
			        and hsc.software_lpar_id = sl.id
			        and hsc.hardware_lpar_id = hl.id
			        and h.id = hl.hardware_id
			    	and s.software_id = is.software_id
			        and is.software_lpar_id = sl.id
			        and m.id = s.manufacturer_id
			        and s.level = 'LICENSABLE'
			        and isp.installed_software_id = is.id
			        and is.status = 'ACTIVE'
			        and is.discrepancy_type_id = 1
			union
			select
			        c.account_number
			        , c.customer_name
			        , ct.customer_type_name
			        , sl.name
			        , sl.bios_serial
			        , h.serial
			        , sl.scantime
			        , s.software_name
			        , m.name
			        , s.level
			from
			    customer c
			    ,customer_type ct
			    ,country_code cc
			    ,software_lpar sl
			    ,hw_sw_composite hsc
			    ,hardware_lpar hl
			    ,hardware h
			    ,installed_software is
			    ,software s
			    ,manufacturer m
			    ,installed_dorana_product idp
			where
			        c.status = 'ACTIVE'
			        and c.SW_LICENSE_MGMT = 'YES'
			        and cc.code = 'US'
			        and c.customer_type_id = ct.customer_type_id
			        and cc.id = c.country_code_id
			        and sl.customer_id = c.customer_id
			        and hsc.software_lpar_id = sl.id
			        and hsc.hardware_lpar_id = hl.id
			        and h.id = hl.hardware_id
			    	and s.software_id = is.software_id
			        and is.software_lpar_id = sl.id
			        and m.id = s.manufacturer_id
			        and s.level = 'LICENSABLE'
			        and idp.installed_software_id = is.id
			        and is.status = 'ACTIVE'
			        and is.discrepancy_type_id = 1
		]]>
	</sql-query>

</hibernate-mapping>
