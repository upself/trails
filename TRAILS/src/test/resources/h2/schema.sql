CREATE SCHEMA EAADMIN;

CREATE TABLE eaadmin.v_installed_software_mqt
(
        software_lpar_id BIGINT NOT NULL,
        customer_id BIGINT NOT NULL,
        nodename VARCHAR(255) NOT NULL,
        model VARCHAR(128),
        bios_serial VARCHAR(128),
        processor_count INTEGER NOT NULL,
        scantime TIMESTAMP,
        os_minor_vers INTEGER,
        os_sub_vers VARCHAR(32),
        acquisition_time TIMESTAMP,
        software_lpar_status VARCHAR(32) NOT NULL,
        installed_software_id BIGINT NOT NULL,
        software_id BIGINT NOT NULL,
        users INTEGER NOT NULL,
        inst_processor_count INTEGER NOT NULL,
        authenticated SMALLINT NOT NULL,
        inst_status VARCHAR(32) NOT NULL,
        discrepancy_type_id BIGINT NOT NULL,
        installed_product_id INTEGER NOT NULL,
        product_id BIGINT NOT NULL,
        bank_account_id BIGINT NOT NULL,
        version VARCHAR(64),
        product_type VARCHAR(64) NOT NULL
);

CREATE TABLE
    EAADMIN.MQT_ALERT_REPORT
    (
        ID VARCHAR(64) NOT NULL,
        CUSTOMER_ID BIGINT NOT NULL,
        DISPLAY_NAME VARCHAR(64) NOT NULL,
        ASSET_TYPE VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        ASSIGNED SMALLINT NOT NULL,
        RED INT,
        YELLOW INT,
        GREEN INT,
        RED91 INT,
        RED121 INT,
        RED151 INT,
        RED181 INT,
        RED366 INT,
        ASSET_TOTAL INT,
        CONSTRAINT PKALERTREPORT PRIMARY KEY (ID)
    );
    
CREATE TABLE EAADMIN.SOFTWARE (
  MANUFACTURER_ID		BIGINT NOT NULL,
  SOFTWARE_CATEGORY_ID	BIGINT NOT NULL,
  SOFTWARE_ID			BIGINT NOT NULL,
  SOFTWARE_NAME			VARCHAR(581),
  VERSION				VARCHAR(64),
  PRIORITY				INTEGER NOT NULL,
  LEVEL					VARCHAR(13) NOT NULL,
  TYPE					VARCHAR(1) NOT NULL,
  CHANGE_JUSTIFICATION	VARCHAR(5) NOT NULL,
  COMMENTS				VARCHAR(17) NOT NULL,
  REMOTE_USER			VARCHAR(32) NOT NULL,
  RECORD_TIME			TIMESTAMP,
  STATUS				VARCHAR(8) NOT NULL,
  VENDOR_MANAGED		INTEGER NOT NULL,
  PRODUCT_ROLE			VARCHAR(255),
  PID					VARCHAR(32),
);

CREATE TABLE
    EAADMIN.ACCOUNT_POOL
    (
        ACCOUNT_POOL_ID BIGINT NOT NULL,
        MASTER_ACCOUNT_ID BIGINT NOT NULL,
        MEMBER_ACCOUNT_ID BIGINT NOT NULL,
        LOGICAL_DELETE_IND INTEGER NOT NULL,
        CONSTRAINT PKACCOUNTPOOL PRIMARY KEY (ACCOUNT_POOL_ID)
    );
CREATE TABLE
    EAADMIN.ADVISE_INSTANCE
    (
        START_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        END_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        MODE VARCHAR(4) DEFAULT '' NOT NULL,
        WKLD_COMPRESSION CHARACTER(4) DEFAULT 'NONE' NOT NULL,
        STATUS CHARACTER(9) DEFAULT '' NOT NULL,
        PRIMARY KEY (START_TIME)
    );
CREATE TABLE
    EAADMIN.ADVISE_PARTITION
    (
        EXPLAIN_REQUESTER VARCHAR(128) DEFAULT '' NOT NULL,
        EXPLAIN_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        SOURCE_NAME VARCHAR(128) DEFAULT '' NOT NULL,
        SOURCE_SCHEMA VARCHAR(128) DEFAULT '' NOT NULL,
        SOURCE_VERSION VARCHAR(64) DEFAULT '' NOT NULL,
        EXPLAIN_LEVEL CHARACTER(1) DEFAULT '' NOT NULL,
        STMTNO INTEGER DEFAULT 0 NOT NULL,
        SECTNO INTEGER DEFAULT 0 NOT NULL,
        QUERYNO INTEGER DEFAULT 0 NOT NULL,
        QUERYTAG CHARACTER(20) DEFAULT '' NOT NULL,
        TBNAME VARCHAR(128) NOT NULL,
        TBCREATOR VARCHAR(128) DEFAULT '' NOT NULL,
        PMID SMALLINT NOT NULL,
        TBSPACE VARCHAR(128) DEFAULT '' NOT NULL,
        COLNAMES CLOB(2097152) DEFAULT '' NOT NULL,
        COLCOUNT SMALLINT DEFAULT 0 NOT NULL,
        REPLICATE CHARACTER(1) DEFAULT 'N' NOT NULL,
        COST DOUBLE NOT NULL,
        USEIT CHARACTER(1),
        RUN_ID TIMESTAMP
    );
CREATE TABLE
    EAADMIN.ADVISE_TABLE
    (
        RUN_ID TIMESTAMP,
        TABLE_NAME VARCHAR(128) NOT NULL,
        TABLE_SCHEMA VARCHAR(128) DEFAULT '' NOT NULL,
        TABLESPACE VARCHAR(128) DEFAULT '' NOT NULL,
        SELECTION_FLAG VARCHAR(8) DEFAULT '' NOT NULL,
        TABLE_EXISTS CHARACTER(1) DEFAULT '' NOT NULL,
        USE_TABLE CHARACTER(1) DEFAULT '' NOT NULL,
        GEN_COLUMNS CLOB(2097152) DEFAULT '' NOT NULL,
        ORGANIZE_BY CLOB(2097152) DEFAULT '' NOT NULL,
        CREATION_TEXT CLOB(2097152) DEFAULT '' NOT NULL,
        ALTER_COMMAND CLOB(2097152) DEFAULT '' NOT NULL,
        DISKUSE DOUBLE DEFAULT 0 NOT NULL
    );
CREATE TABLE
    EAADMIN.ADVISE_WORKLOAD
    (
        WORKLOAD_NAME CHARACTER(128) DEFAULT 'WK0' NOT NULL,
        STATEMENT_NO INTEGER DEFAULT 1 NOT NULL,
        STATEMENT_TEXT CLOB(2097152) NOT NULL,
        STATEMENT_TAG VARCHAR(256) DEFAULT '' NOT NULL,
        FREQUENCY INTEGER DEFAULT 1 NOT NULL,
        IMPORTANCE DOUBLE DEFAULT 1 NOT NULL,
        WEIGHT DOUBLE DEFAULT 1 NOT NULL,
        COST_BEFORE DOUBLE,
        COST_AFTER DOUBLE,
        COMPILABLE CHARACTER(17)
    );
CREATE TABLE
    EAADMIN.ALERT
    (
        CUSTOMER_ID BIGINT NOT NULL,
        ALERT_TYPE_ID BIGINT NOT NULL,
        ALERT_CAUSE_ID BIGINT NOT NULL,
        OPEN SMALLINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        ASSIGNEE VARCHAR(32),
        COMMENT VARCHAR(255),
        CONSTRAINT PKALERT PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_CAUSE
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(128) NOT NULL,
        SHOW_IN_GUI SMALLINT NOT NULL,
        ALERT_CAUSE_RESPONSIBILITY_ID BIGINT NOT NULL,
        CONSTRAINT PKALERTCAUSE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_CAUSE_RESPONSIBILITY
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(64),
        CONSTRAINT PKACRESP PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_EXPIRED_MAINT
    (
        LICENSE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        CONSTRAINT PKALERTEXPMAINT PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_EXPIRED_SCAN
    (
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        CONSTRAINT PKALERTEXPIREDSCAN PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_EXP_MAINT_H
    (
        ALERT_EXPIRED_MAINT_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(64),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        CONSTRAINT PKEXPMAINTH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_EXP_SCAN_H
    (
        ALERT_EXPIRED_SCAN_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        CONSTRAINT PKEXPSCANH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_HARDWARE
    (
        HARDWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        CONSTRAINT PKALERTHARDWARE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_HARDWARE_CFGDATA
    (
        HARDWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        CONSTRAINT PKALERTHARDWARE_CFGDATA PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_HARDWARE_CFGDATA_H
    (
        ALERT_HARDWARE_CFGDATA_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        CONSTRAINT PKALERTHARDWARE_CFGDATAH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_HARDWARE_H
    (
        ALERT_HARDWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        CONSTRAINT PKALERTHARDWAREH PRIMARY KEY ( ID)
    );
CREATE TABLE
    EAADMIN.ALERT_HARDWARE_LPAR
    (
        ID BIGINT NOT NULL,
        HARDWARE_LPAR_ID BIGINT NOT NULL
    );
CREATE TABLE
    EAADMIN.ALERT_HW_LPAR
    (
        HARDWARE_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        CONSTRAINT PKALERTHWLPAR PRIMARY KEY ( ID)
    );
CREATE TABLE
    EAADMIN.ALERT_HW_LPAR_H
    (
        ALERT_HW_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        CONSTRAINT PKALERTHWLPARH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_SOFTWARE_LPAR
    (
        ID BIGINT NOT NULL,
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        CONSTRAINT PKALERTSOFTWARELP PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_SW_LPAR
    (
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        CONSTRAINT PKALERTSWLPAR PRIMARY KEY ( ID)
    );
CREATE TABLE
    EAADMIN.ALERT_SW_LPAR_H
    (
        ALERT_SW_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        CONSTRAINT PKALERTSWLPARH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_TYPE
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(64),
        CODE VARCHAR(8),
        IS_DQ SMALLINT,
        CONSTRAINT PKALERTTYPE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_TYPE_CAUSE
    (
        ALERT_TYPE_ID BIGINT NOT NULL,
        ALERT_CAUSE_ID BIGINT NOT NULL,
        STATUS VARCHAR(10) NOT NULL,
        CONSTRAINT PKALERTTYPECAUSE PRIMARY KEY ( ALERT_CAUSE_ID)
    );
CREATE TABLE
    EAADMIN.ALERT_UNLICENSED_SW
    (
        INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255),
        TYPE VARCHAR(16) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        CONSTRAINT PKALERTUNLICSW PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALERT_UNLICENSED_SW_H
    (
        ALERT_UNLICENSED_SW_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        OPEN SMALLINT NOT NULL,
        TYPE VARCHAR(16),
        CONSTRAINT PKALERTUNLICSWH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALIAS
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(255) NOT NULL,
        PREFERRED SMALLINT NOT NULL,
        CONSTRAINT PKALIAS PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.ALLOCATION_METHODOLOGY
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(64) NOT NULL,
        CODE VARCHAR(20) NOT NULL,
        CONSTRAINT PKALLOCATIONMETH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.APPLICATION_SERVER_SIGNATURE
    (
        ID BIGINT NOT NULL,
        NAME VARCHAR(255) NOT NULL,
        CONSTRAINT PKAPPSERVERSIG PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.AUTHORIZED_PRODUCT
    (
        ID BIGINT NOT NULL,
        HARDWARE_LPAR_ID BIGINT NOT NULL,
        CHANGE_NUMBER VARCHAR(16) NOT NULL,
        CHANGE_DATE DATE NOT NULL,
        CONSTRAINT PKAUTHORIZEDPRODUC PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.BANK_ACCOUNT
    (
        ID BIGINT NOT NULL,
        NAME VARCHAR(32) NOT NULL,
        DESCRIPTION VARCHAR(128) NOT NULL,
        TYPE VARCHAR(16) NOT NULL,
        VERSION VARCHAR(8) NOT NULL,
        CONNECTION_TYPE VARCHAR(16) NOT NULL,
        CONNECTION_STATUS VARCHAR(16) NOT NULL,
        DATA_TYPE VARCHAR(32) NOT NULL,
        DATABASE_TYPE VARCHAR(16),
        DATABASE_VERSION VARCHAR(8),
        DATABASE_NAME VARCHAR(8),
        DATABASE_SCHEMA VARCHAR(16),
        DATABASE_IP VARCHAR(16),
        DATABASE_PORT VARCHAR(8),
        DATABASE_USER VARCHAR(16),
        DATABASE_PASSWORD VARCHAR(16),
        SOCKS CHARACTER(1),
        TUNNEL CHARACTER(1),
        TUNNEL_PORT VARCHAR(8),
        AUTHENTICATED_DATA CHARACTER(1),
        SYNC_SIG CHARACTER(1),
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        BUSINESS_CONTACT VARCHAR(255),
        TECHNICAL_CONTACT VARCHAR(255),
        CONSTRAINT PKBANKACCOUNT PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.BANK_ACCOUNT_INCLUSION
    (
        CUSTOMER_ID BIGINT NOT NULL,
        BANK_ACCOUNT_ID BIGINT NOT NULL,
        CONSTRAINT PKBANKACCTINCL PRIMARY KEY (CUSTOMER_ID, BANK_ACCOUNT_ID)
    );
CREATE TABLE
    EAADMIN.BANK_ACCOUNT_JOB
    (
        BANK_ACCOUNT_ID BIGINT NOT NULL,
        NAME VARCHAR(64) NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        COMMENTS VARCHAR(255) NOT NULL,
        START_TIME TIMESTAMP NOT NULL,
        END_TIME TIMESTAMP,
        STATUS VARCHAR(32) NOT NULL,
        FIRST_ERROR_TIME TIMESTAMP,
        CONSTRAINT PKBANKACCOUNTJOB PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.BLUEGROUP
    (
        ID BIGINT NOT NULL,
        NAME VARCHAR(64) NOT NULL,
        DESCRIPTION VARCHAR(128),
        CONSTRAINT PKBLUEGROUP PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.BUNDLE
    (
        SOFTWARE_ID BIGINT NOT NULL,
        NAME VARCHAR(254) NOT NULL,
        ID BIGINT NOT NULL,
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKBUNDLE PRIMARY KEY (NAME, ID)
    );
CREATE TABLE
    EAADMIN.BUNDLE_H
    (
        BUNDLE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL,
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKBUNDLEH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.BUNDLE_SOFTWARE
    (
        SOFTWARE_ID BIGINT NOT NULL,
        BUNDLE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        CONSTRAINT PKBUNDLESOFTWARE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.CAPACITY_TYPE
    (
        CODE SMALLINT NOT NULL,
        DESCRIPTION VARCHAR(60) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKCAPACITYTYPE PRIMARY KEY (CODE)
    );
CREATE TABLE
    EAADMIN.CAUSE_CODE
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        ALERT_TYPE_ID BIGINT,
        ALERT_ID BIGINT,
        ALERT_CAUSE_ID BIGINT,
        TARGET_DATE DATE,
        OWNER VARCHAR(64),
        RECORD_TIME TIMESTAMP,
        REMOTE_USER VARCHAR(64),
        CONSTRAINT PKCAUSECODE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.CAUSE_CODE_H
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        CAUSE_CODE_ID BIGINT NOT NULL,
        ALERT_TYPE_ID BIGINT NOT NULL,
        ALERT_ID BIGINT NOT NULL,
        ALERT_CAUSE_ID BIGINT,
        TARGET_DATE DATE,
        OWNER VARCHAR(64),
        RECORD_TIME TIMESTAMP,
        REMOTE_USER VARCHAR(64),
        CONSTRAINT PKCAUSECODEH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.CONSENT_LETTER
    (
        CONSENT_LETTER_ID BIGINT NOT NULL,
        CUSTOMER_ID BIGINT NOT NULL,
        CONSENT_TYPE_ID BIGINT NOT NULL,
        PRICE_LEVEL_ID BIGINT,
        ESPLA_ENROLLMENT_NUMBER VARCHAR(16),
        RESPOND_DATE DATE,
        ASSET_STATUS VARCHAR(16),
        ACCOUNT_STATUS VARCHAR(16),
        MICROSOFT_STATUS VARCHAR(16),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKCONSENTLETTER PRIMARY KEY (CONSENT_LETTER_ID)
    );
CREATE TABLE
    EAADMIN.CONSENT_TYPE
    (
        CONSENT_TYPE_ID BIGINT NOT NULL,
        CONSENT_TYPE_NAME VARCHAR(64) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKCONSENTTYPE PRIMARY KEY (CONSENT_TYPE_ID)
    );
CREATE TABLE
    EAADMIN.CONTACT
    (
        CONTACT_ID BIGINT NOT NULL,
        ROLE VARCHAR(255) NOT NULL,
        SERIAL VARCHAR(255) NOT NULL,
        FULL_NAME VARCHAR(255) NOT NULL,
        REMOTE_USER VARCHAR(255) NOT NULL,
        NOTES_MAIL VARCHAR(255) NOT NULL,
        CREATION_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        UPDATE_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        CONSTRAINT PKCONTACT PRIMARY KEY (CONTACT_ID)
    );
CREATE TABLE
    EAADMIN.CONTACT_ACCOUNT
    (
        CUSTOMER_ID BIGINT NOT NULL,
        CONTACT_SUPPORT_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        CONSTRAINT PKCONTACTACCOUNT PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.CONTACT_HARDWARE
    (
        HARDWARE_ID BIGINT NOT NULL,
        CONTACT_SUPPORT_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        CONSTRAINT PKCONTACTHARDWARE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.CONTACT_LPAR
    (
        HARDWARE_LPAR_ID BIGINT NOT NULL,
        CONTACT_SUPPORT_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        CONSTRAINT PKCONTACTHARDWARE PRIMARY KEY ( ID)
    );
CREATE TABLE
    EAADMIN.CONTACT_SUPPORT
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(64) NOT NULL,
        EMAIL VARCHAR(64) NOT NULL,
        SERIAL VARCHAR(32),
        SERIAL_MGR1 VARCHAR(32),
        SERIAL_MGR2 VARCHAR(32),
        SERIAL_MGR3 VARCHAR(32),
        ISMANAGER VARCHAR(3),
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKCONTACTSUPPORT PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.COUNTRY_CODE
    (
        REGION_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL,
        NAME VARCHAR(64) NOT NULL,
        CODE VARCHAR(64) NOT NULL,
        CREATION_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        UPDATE_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        CONSTRAINT PKCOUNTRYCODE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.CUSTOMER
    (
        CUSTOMER_ID BIGINT NOT NULL,
        CUSTOMER_TYPE_ID BIGINT NOT NULL,
        POD_ID BIGINT NOT NULL,
        INDUSTRY_ID BIGINT NOT NULL,
        ACCOUNT_NUMBER BIGINT NOT NULL,
        CUSTOMER_NAME VARCHAR(64),
        CONTACT_DPE_ID BIGINT,
        CONTACT_FA_ID BIGINT,
        CONTACT_HW_ID BIGINT,
        CONTACT_SW_ID BIGINT,
        CONTACT_FOCAL_ASSET_ID BIGINT,
        CONTACT_TRANSITION_ID BIGINT,
        ASSET_TOOLS_BILLING_CODE VARCHAR(64),
        STATUS VARCHAR(32) NOT NULL,
        HW_INTERLOCK VARCHAR(3),
        SW_INTERLOCK VARCHAR(3),
        INV_INTERLOCK VARCHAR(3),
        SW_LICENSE_MGMT VARCHAR(3),
        SW_SUPPORT VARCHAR(3),
        HW_SUPPORT VARCHAR(3),
        TRANSITION_STATUS VARCHAR(16),
        TRANSITION_EXIT_DATE DATE,
        COUNTRY_CODE_ID BIGINT,
        SCAN_VALIDITY INTEGER,
        SW_TRACKING VARCHAR(3),
        SW_COMPLIANCE_MGMT VARCHAR(3),
        SW_FINANCIAL_RESPONSIBILITY VARCHAR(16),
        SW_FINANCIAL_MGMT VARCHAR(3),
        CREATION_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        UPDATE_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        CONTRACT_SIGN_DATE DATE,
        TME_OBJECT_ID VARCHAR(255),
        SECTOR_ID BIGINT,
        CONSTRAINT PKCUSTOMER PRIMARY KEY (CUSTOMER_ID)
    );
CREATE TABLE
    EAADMIN.CUSTOMER_AGREEMENT
    (
        CUSTOMER_AGREEMENT_ID BIGINT NOT NULL,
        CUSTOMER_ID BIGINT NOT NULL,
        CUSTOMER_AGREEMENT_TYPE_ID BIGINT NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKCUSTOMERAGREEM PRIMARY KEY (CUSTOMER_AGREEMENT_ID)
    );
CREATE TABLE
    EAADMIN.CUSTOMER_AGREEMENT_TYPE
    (
        CUSTOMER_AGREEMENT_TYPE_ID BIGINT NOT NULL,
        CUSTOMER_AGREEMENT_TYPE VARCHAR(64) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKCUSTOMERAGREEME PRIMARY KEY (CUSTOMER_AGREEMENT_TYPE_ID)
    );
CREATE TABLE
    EAADMIN.CUSTOMER_BLUEGROUP
    (
        CUSTOMER_ID BIGINT NOT NULL,
        BLUEGROUP_ID BIGINT NOT NULL,
        CONSTRAINT PKCUSTBLUEGROUP PRIMARY KEY (CUSTOMER_ID, BLUEGROUP_ID)
    );
CREATE TABLE
    EAADMIN.CUSTOMER_NUMBER
    (
        CUSTOMER_ID BIGINT NOT NULL,
        CUSTOMER_NUMBER_ID BIGINT NOT NULL,
        CUSTOMER_NUMBER VARCHAR(255) NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CREATION_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        UPDATE_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        LPID_ID BIGINT,
        COUNTRY_CODE_ID BIGINT NOT NULL,
        CONSTRAINT PKCUSTOMERNUMBER PRIMARY KEY (CUSTOMER_NUMBER_ID)
    );
CREATE TABLE
    EAADMIN.CUSTOMER_TYPE
    (
        CUSTOMER_TYPE_ID BIGINT NOT NULL,
        CUSTOMER_TYPE_NAME VARCHAR(64) NOT NULL,
        CREATION_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        UPDATE_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        CONSTRAINT PKCUSTOMERTYPE PRIMARY KEY (CUSTOMER_TYPE_ID)
    );
CREATE TABLE
    EAADMIN.C_VERSION_ID
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        PLATFORM_ID BIGINT,
        C_VERSION_ID VARCHAR(8),
        CONSTRAINT PKCVERSIONID PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.DATABASECHANGELOG
    (
        ID VARCHAR(255) NOT NULL,
        AUTHOR VARCHAR(255) NOT NULL,
        FILENAME VARCHAR(255) NOT NULL,
        DATEEXECUTED TIMESTAMP NOT NULL,
        ORDEREXECUTED INTEGER NOT NULL,
        EXECTYPE VARCHAR(10) NOT NULL,
        MD5SUM VARCHAR(35),
        DESCRIPTION VARCHAR(255),
        COMMENTS VARCHAR(255),
        TAG VARCHAR(255),
        LIQUIBASE VARCHAR(20),
        CONTEXTS VARCHAR(255),
        LABELS VARCHAR(255)
    );
CREATE TABLE
    EAADMIN.DATABASECHANGELOGLOCK
    (
        ID INTEGER NOT NULL,
        LOCKED SMALLINT NOT NULL,
        LOCKGRANTED TIMESTAMP,
        LOCKEDBY VARCHAR(255),
        CONSTRAINT PK_DBCHGLOGLOCK PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.DISCREPANCY_TYPE
    (
        ID BIGINT NOT NULL,
        NAME VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKDISCREPANCYTYPE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.DORANA_PRODUCT
    (
        SOFTWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL,
        PRODUCT VARCHAR(255) NOT NULL,
        VERSION VARCHAR(32),
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKDORANAPRODUCT PRIMARY KEY ( ID)
    );
CREATE TABLE
    EAADMIN.EXPLAIN_ARGUMENT
    (
        EXPLAIN_REQUESTER VARCHAR(128) NOT NULL,
        EXPLAIN_TIME TIMESTAMP NOT NULL,
        SOURCE_NAME VARCHAR(128) NOT NULL,
        SOURCE_SCHEMA VARCHAR(128) NOT NULL,
        SOURCE_VERSION VARCHAR(64) NOT NULL,
        EXPLAIN_LEVEL CHARACTER(1) NOT NULL,
        STMTNO INTEGER NOT NULL,
        SECTNO INTEGER NOT NULL,
        OPERATOR_ID INTEGER NOT NULL,
        ARGUMENT_TYPE CHARACTER(8) NOT NULL,
        ARGUMENT_VALUE VARCHAR(1024),
        LONG_ARGUMENT_VALUE CLOB(2097152)
    );
CREATE TABLE
    EAADMIN.EXPLAIN_DIAGNOSTIC
    (
        EXPLAIN_REQUESTER VARCHAR(128) NOT NULL,
        EXPLAIN_TIME TIMESTAMP NOT NULL,
        SOURCE_NAME VARCHAR(128) NOT NULL,
        SOURCE_SCHEMA VARCHAR(128) NOT NULL,
        SOURCE_VERSION VARCHAR(64) NOT NULL,
        EXPLAIN_LEVEL CHARACTER(1) NOT NULL,
        STMTNO INTEGER NOT NULL,
        SECTNO INTEGER NOT NULL,
        DIAGNOSTIC_ID INTEGER NOT NULL,
        CODE INTEGER NOT NULL,
        PRIMARY KEY (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME, SOURCE_SCHEMA, SOURCE_VERSION,
        EXPLAIN_LEVEL, STMTNO, SECTNO, DIAGNOSTIC_ID)
    );
CREATE TABLE
    EAADMIN.EXPLAIN_DIAGNOSTIC_DATA
    (
        EXPLAIN_REQUESTER VARCHAR(128) NOT NULL,
        EXPLAIN_TIME TIMESTAMP NOT NULL,
        SOURCE_NAME VARCHAR(128) NOT NULL,
        SOURCE_SCHEMA VARCHAR(128) NOT NULL,
        SOURCE_VERSION VARCHAR(64) NOT NULL,
        EXPLAIN_LEVEL CHARACTER(1) NOT NULL,
        STMTNO INTEGER NOT NULL,
        SECTNO INTEGER NOT NULL,
        DIAGNOSTIC_ID INTEGER NOT NULL,
        ORDINAL INTEGER NOT NULL,
        TOKEN VARCHAR(1000),
        TOKEN_LONG BLOB(3145728)
    );
CREATE TABLE
    EAADMIN.EXPLAIN_INSTANCE
    (
        EXPLAIN_REQUESTER VARCHAR(128) NOT NULL,
        EXPLAIN_TIME TIMESTAMP NOT NULL,
        SOURCE_NAME VARCHAR(128) NOT NULL,
        SOURCE_SCHEMA VARCHAR(128) NOT NULL,
        SOURCE_VERSION VARCHAR(64) NOT NULL,
        EXPLAIN_OPTION CHARACTER(1) NOT NULL,
        SNAPSHOT_TAKEN CHARACTER(1) NOT NULL,
        DB2_VERSION CHARACTER(7) NOT NULL,
        SQL_TYPE CHARACTER(1) NOT NULL,
        QUERYOPT INTEGER NOT NULL,
        BLOCK CHARACTER(1) NOT NULL,
        ISOLATION CHARACTER(2) NOT NULL,
        BUFFPAGE INTEGER NOT NULL,
        AVG_APPLS INTEGER NOT NULL,
        SORTHEAP INTEGER NOT NULL,
        LOCKLIST INTEGER NOT NULL,
        MAXLOCKS SMALLINT NOT NULL,
        LOCKS_AVAIL INTEGER NOT NULL,
        CPU_SPEED DOUBLE NOT NULL,
        REMARKS VARCHAR(254),
        DBHEAP INTEGER NOT NULL,
        COMM_SPEED DOUBLE NOT NULL,
        PARALLELISM CHARACTER(2) NOT NULL,
        DATAJOINER CHARACTER(1) NOT NULL,
        PRIMARY KEY (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME, SOURCE_SCHEMA, SOURCE_VERSION)
    );
CREATE TABLE
    EAADMIN.EXPLAIN_OPERATOR
    (
        EXPLAIN_REQUESTER VARCHAR(128) NOT NULL,
        EXPLAIN_TIME TIMESTAMP NOT NULL,
        SOURCE_NAME VARCHAR(128) NOT NULL,
        SOURCE_SCHEMA VARCHAR(128) NOT NULL,
        SOURCE_VERSION VARCHAR(64) NOT NULL,
        EXPLAIN_LEVEL CHARACTER(1) NOT NULL,
        STMTNO INTEGER NOT NULL,
        SECTNO INTEGER NOT NULL,
        OPERATOR_ID INTEGER NOT NULL,
        OPERATOR_TYPE CHARACTER(6) NOT NULL,
        TOTAL_COST DOUBLE NOT NULL,
        IO_COST DOUBLE NOT NULL,
        CPU_COST DOUBLE NOT NULL,
        FIRST_ROW_COST DOUBLE NOT NULL,
        RE_TOTAL_COST DOUBLE NOT NULL,
        RE_IO_COST DOUBLE NOT NULL,
        RE_CPU_COST DOUBLE NOT NULL,
        COMM_COST DOUBLE NOT NULL,
        FIRST_COMM_COST DOUBLE NOT NULL,
        BUFFERS DOUBLE NOT NULL,
        REMOTE_TOTAL_COST DOUBLE NOT NULL,
        REMOTE_COMM_COST DOUBLE NOT NULL
    );
CREATE TABLE
    EAADMIN.EXPLAIN_PREDICATE
    (
        EXPLAIN_REQUESTER VARCHAR(128) NOT NULL,
        EXPLAIN_TIME TIMESTAMP NOT NULL,
        SOURCE_NAME VARCHAR(128) NOT NULL,
        SOURCE_SCHEMA VARCHAR(128) NOT NULL,
        SOURCE_VERSION VARCHAR(64) NOT NULL,
        EXPLAIN_LEVEL CHARACTER(1) NOT NULL,
        STMTNO INTEGER NOT NULL,
        SECTNO INTEGER NOT NULL,
        OPERATOR_ID INTEGER NOT NULL,
        PREDICATE_ID INTEGER NOT NULL,
        HOW_APPLIED CHARACTER(10) NOT NULL,
        WHEN_EVALUATED CHARACTER(3) NOT NULL,
        RELOP_TYPE CHARACTER(2) NOT NULL,
        SUBQUERY CHARACTER(1) NOT NULL,
        FILTER_FACTOR DOUBLE NOT NULL,
        PREDICATE_TEXT CLOB(2097152),
        RANGE_NUM INTEGER
    );
CREATE TABLE
    EAADMIN.EXPLAIN_STATEMENT
    (
        EXPLAIN_REQUESTER VARCHAR(128) NOT NULL,
        EXPLAIN_TIME TIMESTAMP NOT NULL,
        SOURCE_NAME VARCHAR(128) NOT NULL,
        SOURCE_SCHEMA VARCHAR(128) NOT NULL,
        SOURCE_VERSION VARCHAR(64) NOT NULL,
        EXPLAIN_LEVEL CHARACTER(1) NOT NULL,
        STMTNO INTEGER NOT NULL,
        SECTNO INTEGER NOT NULL,
        QUERYNO INTEGER NOT NULL,
        QUERYTAG CHARACTER(20) NOT NULL,
        STATEMENT_TYPE CHARACTER(2) NOT NULL,
        UPDATABLE CHARACTER(1) NOT NULL,
        DELETABLE CHARACTER(1) NOT NULL,
        TOTAL_COST DOUBLE NOT NULL,
        STATEMENT_TEXT CLOB(2097152) NOT NULL,
        SNAPSHOT BLOB(10485760),
        QUERY_DEGREE INTEGER NOT NULL,
        PRIMARY KEY (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME, SOURCE_SCHEMA, SOURCE_VERSION,
        EXPLAIN_LEVEL, STMTNO, SECTNO)
    );
CREATE TABLE
    EAADMIN.EXPLAIN_STREAM
    (
        EXPLAIN_REQUESTER VARCHAR(128) NOT NULL,
        EXPLAIN_TIME TIMESTAMP NOT NULL,
        SOURCE_NAME VARCHAR(128) NOT NULL,
        SOURCE_SCHEMA VARCHAR(128) NOT NULL,
        SOURCE_VERSION VARCHAR(64) NOT NULL,
        EXPLAIN_LEVEL CHARACTER(1) NOT NULL,
        STMTNO INTEGER NOT NULL,
        SECTNO INTEGER NOT NULL,
        STREAM_ID INTEGER NOT NULL,
        SOURCE_TYPE CHARACTER(1) NOT NULL,
        SOURCE_ID INTEGER NOT NULL,
        TARGET_TYPE CHARACTER(1) NOT NULL,
        TARGET_ID INTEGER NOT NULL,
        OBJECT_SCHEMA VARCHAR(128),
        OBJECT_NAME VARCHAR(128),
        STREAM_COUNT DOUBLE NOT NULL,
        COLUMN_COUNT SMALLINT NOT NULL,
        PREDICATE_ID INTEGER NOT NULL,
        COLUMN_NAMES CLOB(2097152),
        PMID SMALLINT NOT NULL,
        SINGLE_NODE CHARACTER(5),
        PARTITION_COLUMNS CLOB(2097152),
        SEQUENCE_SIZES CLOB(2097152)
    );
CREATE TABLE
    EAADMIN.FILE
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(255) NOT NULL,
        SIZE INTEGER,
        CONSTRAINT PKFILE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.FILE_SIGNATURE
    (
        ID BIGINT NOT NULL,
        OPERATOR VARCHAR(3) NOT NULL,
        SCOPE VARCHAR(16),
        CONSTRAINT PKFILESIGNATURE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.FILE_SIGNATURE_FILE
    (
        FILE_SIGNATURE_ID BIGINT NOT NULL,
        FILE_ID BIGINT NOT NULL,
        CONSTRAINT PKFILESIGFILE PRIMARY KEY (FILE_SIGNATURE_ID, FILE_ID)
    );
CREATE TABLE
    EAADMIN.FILTER_SIGNATURE
    (
        ID BIGINT NOT NULL,
        PACKAGE_NAME VARCHAR(255) NOT NULL,
        PACKAGE_VENDOR VARCHAR(255),
        PACKAGE_VERSION VARCHAR(100),
        CONSTRAINT PKFILTERSIGNATURE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.GEOGRAPHY
    (
        ID BIGINT NOT NULL,
        NAME VARCHAR(64) NOT NULL,
        CREATION_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        UPDATE_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        CONSTRAINT PKGEOGRAPHY PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.HARDWARE
    (
        MACHINE_TYPE_ID BIGINT NOT NULL,
        SERIAL VARCHAR(32) NOT NULL,
        COUNTRY VARCHAR(2) NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        OWNER VARCHAR(64),
        CUSTOMER_NUMBER VARCHAR(16),
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        HARDWARE_STATUS VARCHAR(16),
        ACCOUNT_NUMBER VARCHAR(16),
        CUSTOMER_ID BIGINT NOT NULL,
        MODEL VARCHAR(16),
        PROCESSOR_COUNT INTEGER,
        CLASSIFICATION VARCHAR(32),
        CHIPS INTEGER DEFAULT 0 NOT NULL,
        PROCESSOR_TYPE VARCHAR(64),
        SERVER_TYPE VARCHAR(15) DEFAULT 'PRODUCTION' NOT NULL,
        CPU_MIPS INTEGER NOT NULL,
        CPU_MSU INTEGER NOT NULL,
        MAST_PROCESSOR_TYPE VARCHAR(32),
        PROCESSOR_MANUFACTURER VARCHAR(64),
        PROCESSOR_MODEL VARCHAR(32),
        NBR_CORES_PER_CHIP DECIMAL(3,0),
        NBR_OF_CHIPS_MAX DECIMAL(4,0),
        SHARED VARCHAR(2),
        CPU_GARTNER_MIPS DECIMAL(10,3),
        SHARED_PROCESSOR CHARACTER(1),
        CLOUD_NAME VARCHAR(128),
        CHASSIS_ID VARCHAR(50),
        CPU_IFL INTEGER,
        CONSTRAINT PKHARDWARE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.HARDWARE_LPAR
    (
        CUSTOMER_ID BIGINT NOT NULL,
        HARDWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(255) NOT NULL,
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        EXT_ID CHARACTER(8),
        TECH_IMAGE_ID VARCHAR(128),
        SERVER_TYPE VARCHAR(15) DEFAULT 'PRODUCTION' NOT NULL,
        PART_MIPS INTEGER NOT NULL,
        PART_MSU INTEGER NOT NULL,
        LPAR_STATUS VARCHAR(32),
        SPLA CHARACTER(3),
        SYSPLEX CHARACTER(8),
        INTERNET_ICC_FLAG CHARACTER(1),
        PART_GARTNER_MIPS DECIMAL(10,3),
        BACKUPMETHOD VARCHAR(25),
        CLUSTER_TYPE VARCHAR(25),
        VIRTUAL_MOBILITY_RESTRICTION CHARACTER(1),
        CAPPED_LPAR CHARACTER(1),
        VIRTUAL_FLAG CHARACTER(1),
        EFFECTIVE_THREADS DECIMAL(14,3),
        OS_TYPE VARCHAR(64),
        VCPU DECIMAL(4,0),
        CONSTRAINT PKHARDWARELPAR PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.HARDWARE_LPAR_EFF
    (
        HARDWARE_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        PROCESSOR_COUNT INTEGER NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKHARDWARELPAREFF PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.HOLIDAY
    (
        HOLIDAY DATE NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKHOLIDAY PRIMARY KEY (HOLIDAY)
    );
CREATE TABLE
    EAADMIN.HW_SW_COMPOSITE
    (
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        HARDWARE_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        MATCH_METHOD VARCHAR(32) NOT NULL,
        CONSTRAINT PKHWSWCOMPOSITE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.H_ALERT
    (
        ALERT_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        CUSTOMER_ID BIGINT NOT NULL,
        ALERT_TYPE_ID BIGINT NOT NULL,
        ALERT_CAUSE_ID BIGINT NOT NULL,
        OPEN SMALLINT NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        ASSIGNEE VARCHAR(32),
        COMMENT VARCHAR(255),
        CONSTRAINT PKHALERT PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.H_AUTHORIZED_PRODUCT
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        AUTHORIZED_PRODUCT_ID BIGINT NOT NULL,
        PRODUCT_ID BIGINT NOT NULL,
        HARDWARE_LPAR_ID BIGINT NOT NULL,
        VERSION VARCHAR(32) NOT NULL,
        CHANGE_NUMBER VARCHAR(16) NOT NULL,
        CHANGE_DATE DATE NOT NULL,
        ACTIVE SMALLINT NOT NULL,
        COMMENT VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKHAUTHORIZEDPRODU PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.H_RECONCILE_USED_LICENSE
    (
        H_RECONCILE_ID BIGINT NOT NULL,
        H_USED_LICENSE_ID BIGINT NOT NULL,
        CONSTRAINT PKHRECONCILEUSEDLI PRIMARY KEY (H_RECONCILE_ID, H_USED_LICENSE_ID)
    );
CREATE TABLE
    EAADMIN.H_USED_LICENSE
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        LICENSE_ID BIGINT NOT NULL,
        USED_QUANTITY INTEGER NOT NULL,
        CAPACITY_TYPE_ID SMALLINT NOT NULL,
        CONSTRAINT PKHUSEDLICENSE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.IBM_BRAND
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        MANUFACTURER_ID BIGINT NOT NULL
    );
CREATE TABLE
    EAADMIN.IDENTITY_TABLE_2011
    (
        SCHEMA_NAME VARCHAR(30) NOT NULL,
        TABLE_NAME VARCHAR(30) NOT NULL,
        COLUMN_NAME VARCHAR(30) NOT NULL,
        RESTART_VALUE BIGINT
    );
CREATE TABLE
    EAADMIN.INDUSTRY
    (
        INDUSTRY_ID BIGINT NOT NULL,
        INDUSTRY_NAME VARCHAR(255) NOT NULL,
        CREATION_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        UPDATE_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        CONSTRAINT PKINDUSTRY PRIMARY KEY (INDUSTRY_ID)
    );
CREATE TABLE
    EAADMIN.INSTALLED_DORANA_PRODUCT
    (
        INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        DORANA_PRODUCT_ID BIGINT NOT NULL,
        BANK_ACCOUNT_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        CONSTRAINT PKINSTDORANAPROD PRIMARY KEY ( ID)
    );
CREATE TABLE
    EAADMIN.INSTALLED_FILTER
    (
        INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        SOFTWARE_FILTER_ID BIGINT NOT NULL,
        BANK_ACCOUNT_ID BIGINT NOT NULL,
        ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY,
        CONSTRAINT PKINSTALLEDFILTER PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.INSTALLED_PRODUCT
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        PRODUCT_ID BIGINT NOT NULL,
        VERSION VARCHAR(32),
        REMOTE_USER VARCHAR(32) NOT NULL,
        CREATION_TIME TIMESTAMP NOT NULL,
        ACTIVE SMALLINT NOT NULL,
        COMMENT VARCHAR(255),
        CONSTRAINT PKINSTALLEDPRODUCT PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.INSTALLED_SA_PRODUCT
    (
        INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        SA_PRODUCT_ID BIGINT NOT NULL,
        BANK_ACCOUNT_ID BIGINT NOT NULL,
        ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY,
        CONSTRAINT PKINSTSAPRODUCT PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.INSTALLED_SIGNATURE
    (
        INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        SOFTWARE_SIGNATURE_ID BIGINT NOT NULL,
        BANK_ACCOUNT_ID BIGINT NOT NULL,
        ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY,
        PATH VARCHAR(255),
        CONSTRAINT PKINSTSIGNATURE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.INSTALLED_SOFTWARE
    (
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        SOFTWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        DISCREPANCY_TYPE_ID BIGINT NOT NULL,
        USERS INTEGER NOT NULL,
        PROCESSOR_COUNT INTEGER NOT NULL,
        AUTHENTICATED SMALLINT NOT NULL,
        VERSION VARCHAR(64),
        RESEARCH_FLAG SMALLINT,
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        INVALID_CATEGORY VARCHAR(64),
        CREATION_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        CONSTRAINT PKINSTSOFTWARE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.INSTALLED_SOFTWARE_EFF
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        AUTHENTICATED SMALLINT,
        USER_COUNT INTEGER,
        OWNER VARCHAR(16),
        COMMENT VARCHAR(255),
        RECORD_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        REMOTE_USER VARCHAR(64) DEFAULT 'USER' NOT NULL,
        CONSTRAINT PKINSTALLEDSOFTEFF PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.INSTALLED_TADZ
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        MAINFRAME_FEATURE_ID BIGINT NOT NULL,
        BANK_ACCOUNT_ID BIGINT NOT NULL,
        USE_COUNT BIGINT NOT NULL,
        LAST_USED DATE
    );
CREATE TABLE
    EAADMIN.INSTALLED_VM_PRODUCT
    (
        INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        VM_PRODUCT_ID BIGINT NOT NULL,
        BANK_ACCOUNT_ID BIGINT NOT NULL,
        ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY,
        CONSTRAINT PKINSTVMPRODUCT PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.INSTALL_REGISTRY_SIGNATURE
    (
        ID BIGINT NOT NULL,
        DATA VARCHAR(255) NOT NULL,
        KEY VARCHAR(255) NOT NULL,
        SOURCE VARCHAR(4) NOT NULL,
        CONSTRAINT PKINSTALLREGSIG PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.J2EE_APPLICATION_SIGNATURE
    (
        ID BIGINT NOT NULL,
        NAME VARCHAR(255) NOT NULL,
        CONSTRAINT PKJ2EEAPPSIGNATURE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.KB_DEFINITION
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        ACTIVE SMALLINT,
        CREATION_TIME TIMESTAMP NOT NULL,
        CUSTOM_1 VARCHAR(255),
        CUSTOM_2 VARCHAR(255),
        CUSTOM_3 VARCHAR(255),
        DATA_INPUT SMALLINT,
        DEFINITION_SOURCE VARCHAR(255),
        DELETED SMALLINT,
        DESCRIPTION VARCHAR(1000),
        EXTERNAL_ID VARCHAR(255),
        GUID VARCHAR(255),
        MODIFICATION_TIME TIMESTAMP,
        CONSTRAINT PKKBDEFINITION PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.LICENSE
    (
        CUSTOMER_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        EXT_SRC_ID VARCHAR(32) NOT NULL,
        LIC_TYPE VARCHAR(10) NOT NULL,
        CAP_TYPE SMALLINT NOT NULL,
        QUANTITY INTEGER NOT NULL,
        IBM_OWNED SMALLINT NOT NULL,
        DRAFT SMALLINT NOT NULL,
        POOL SMALLINT NOT NULL,
        TRY_AND_BUY SMALLINT NOT NULL,
        EXPIRE_DATE DATE,
        END_DATE DATE NOT NULL,
        PO_NUMBER VARCHAR(43),
        PROD_NAME VARCHAR(255),
        FULL_DESC VARCHAR(255),
        VERSION VARCHAR(32),
        CPU_SERIAL VARCHAR(255),
        LICENSE_STATUS SMALLINT NOT NULL,
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        AGREEMENT_TYPE VARCHAR(2),
        LPAR_NAME VARCHAR(20),
        ENVIRONMENT VARCHAR(20),
        PID VARCHAR(32),
        CONSTRAINT PKLICENSE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.LICENSE_AGREEMENT_TYPE
    (
        LICENSE_AGREEMENT_TYPE_ID BIGINT NOT NULL,
        LICENSE_AGREEMENT_TYPE_NAME VARCHAR(64) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKLICENSEAGREEMEN PRIMARY KEY (LICENSE_AGREEMENT_TYPE_ID)
    );
CREATE TABLE
    EAADMIN.LICENSE_SW_MAP
    (
        LICENSE_ID BIGINT NOT NULL,
        SOFTWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        CONSTRAINT PKLICENSESWMAP PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.LICENSE_TYPE
    (
        CODE VARCHAR(10) NOT NULL,
        DESCRIPTION VARCHAR(100) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKLICENSETYPE PRIMARY KEY (CODE)
    );
CREATE TABLE
    EAADMIN.LPID
    (
        LPID_ID BIGINT NOT NULL,
        MAJOR_ID BIGINT NOT NULL,
        LPID_NAME VARCHAR(8) NOT NULL,
        CONSTRAINT PKLPID PRIMARY KEY (LPID_ID)
    );
CREATE TABLE
    EAADMIN.MACHINE_TYPE
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(8) NOT NULL,
        DEFINITION VARCHAR(64),
        TYPE VARCHAR(16) NOT NULL,
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKMACHINETYPE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.MAINFRAME_FEATURE
    (
        ID BIGINT NOT NULL,
        VERSION_ID BIGINT NOT NULL,
        EID VARCHAR(8),
        IBM_CUSTOMER_AGREEMENT SMALLINT,
        SOFTWARE_PRICING_TYPE VARCHAR(2),
        SSE_N_ID VARCHAR(8),
        VUE VARCHAR(8),
        CONSTRAINT PKMAINFRAMEFEATURE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.MAINFRAME_VERSION
    (
        MANUFACTURER_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL,
        PRODUCT_ID BIGINT NOT NULL,
        IBM_CUSTOMER_AGREEMENT SMALLINT,
        IDENTIFIER VARCHAR(64),
        SERVICE_SUPPORT_ID VARCHAR(8),
        SOFTWARE_PRICING_TYPE VARCHAR(2),
        VERSION INTEGER,
        VUE VARCHAR(8),
        CONSTRAINT PKMAINFRAMEVERSION PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.MAJOR
    (
        MAJOR_ID BIGINT NOT NULL,
        MAJOR_NAME VARCHAR(8) NOT NULL,
        CONSTRAINT PKMAJOR PRIMARY KEY (MAJOR_ID)
    );
CREATE TABLE
    EAADMIN.MANUAL_QUEUE
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        SOFTWARE_ID BIGINT NOT NULL,
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        CUSTOMER_ID BIGINT NOT NULL,
        HOSTNAME VARCHAR(255) NOT NULL,
        RECORD_TIME TIMESTAMP,
        REMOTE_USER VARCHAR(64),
        DELETED SMALLINT DEFAULT 0 NOT NULL,
        COMMENTS VARCHAR(255),
        CONSTRAINT PKMANUALQUEUE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.MANUFACTURER
    (
        ID BIGINT NOT NULL,
        DID VARCHAR(255),
        NAME VARCHAR(255) NOT NULL,
        WEBSITE VARCHAR(1000),
        CONSTRAINT PKMANUFACTURER PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.MANUFACTURER_ALIAS
    (
        MANUFACTURER_ID BIGINT NOT NULL,
        ALIAS_ID BIGINT NOT NULL
    );
CREATE TABLE
    EAADMIN.MICROSOFT_PRICE_LIST
    (
        MICROSOFT_PRICE_LIST_ID BIGINT NOT NULL,
        MICROSOFT_PRODUCT_ID BIGINT NOT NULL,
        LICENSE_AGREEMENT_TYPE_ID BIGINT NOT NULL,
        LICENSE_TYPE_ID BIGINT NOT NULL,
        PRICE_LEVEL_ID BIGINT,
        QUALIFIED_DISCOUNT_ID BIGINT,
        SKU VARCHAR(255) NOT NULL,
        AUTHENTICATED VARCHAR(1),
        UNIT INTEGER NOT NULL,
        UNIT_PRICE DECIMAL(12,2) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKMICROSOFTPRICELI PRIMARY KEY (MICROSOFT_PRICE_LIST_ID)
    );
CREATE TABLE
    EAADMIN.MICROSOFT_PRODUCT
    (
        MICROSOFT_PRODUCT_ID BIGINT NOT NULL,
        PRODUCT_DESCRIPTION VARCHAR(64) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKMICROSOFTPRODUCT PRIMARY KEY (MICROSOFT_PRODUCT_ID)
    );
CREATE TABLE
    EAADMIN.MICROSOFT_PRODUCT_MAP
    (
        MICROSOFT_PRODUCT_MAP_ID BIGINT NOT NULL,
        MICROSOFT_PRODUCT_ID BIGINT NOT NULL,
        CONSTRAINT PKMICROSOFTPRODUM PRIMARY KEY (MICROSOFT_PRODUCT_MAP_ID)
    );
CREATE TABLE
    EAADMIN.MIPS
    (
        MACHINE_TYPE_ID BIGINT NOT NULL,
        MODEL CHARACTER(20) NOT NULL,
        MIPS_GROUP CHARACTER(3) NOT NULL,
        VENDOR CHARACTER(10) NOT NULL,
        MIPSVENDOR CHARACTER(10) NOT NULL,
        MIPS DECIMAL(7,2) NOT NULL,
        UPDUSER CHARACTER(8) NOT NULL,
        UPDSTAMP TIMESTAMP NOT NULL,
        UPD_INTRANET_ID CHARACTER(60) NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKMIPS PRIMARY KEY (MACHINE_TYPE_ID, MODEL, MIPS_GROUP, VENDOR, MIPSVENDOR)
    );
CREATE TABLE
    EAADMIN.MISLD_ACCOUNT_SETTINGS
    (
        MISLD_ACCOUNT_SETTINGS_ID BIGINT NOT NULL,
        QUALIFIED_DISCOUNT_ID BIGINT,
        LICENSE_AGREEMENT_TYPE_ID BIGINT,
        RELEASE_INFORMATION SMALLINT,
        CONTRACT_END SMALLINT,
        MICROSOFT_SOFTWARE_OWNER VARCHAR(32),
        MICROSOFT_SOFTWARE_BUYER VARCHAR(32),
        US_MACHINES SMALLINT,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        LPID_ID BIGINT,
        PRICE_REPORT_STATUS VARCHAR(32) DEFAULT '' NOT NULL,
        PRICE_REPORT_STATUS_USER VARCHAR(32) DEFAULT '' NOT NULL,
        PRICE_REPORT_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        CONSTRAINT PKMISLDACCOUNTSETT PRIMARY KEY (MISLD_ACCOUNT_SETTINGS_ID)
    );
CREATE TABLE
    EAADMIN.MISLD_DATES
    (
        MISLD_DATE_ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        DATE_TYPE VARCHAR(32) NOT NULL,
        DATE_VALUE VARCHAR(10) NOT NULL,
        RECORD_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        REMOTE_USER VARCHAR(64) DEFAULT 'USER' NOT NULL,
        CONSTRAINT PKMISLDDATES PRIMARY KEY (MISLD_DATE_ID)
    );
CREATE TABLE
    EAADMIN.MISLD_LICENSE_TYPE
    (
        LICENSE_TYPE_ID BIGINT NOT NULL,
        LICENSE_TYPE_NAME VARCHAR(64) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKMISLDLICENSETYP PRIMARY KEY (LICENSE_TYPE_ID)
    );
CREATE TABLE
    EAADMIN.MISLD_REGISTRATION
    (
        MISLD_REGISTRATION_ID BIGINT NOT NULL,
        SCOPE SMALLINT NOT NULL,
        NOT_IN_SCOPE_JUSTIFICATION VARCHAR(64),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        JUSTIFICATION_OTHER VARCHAR(64),
        CONSTRAINT PKMISLDREGISTRATIO PRIMARY KEY (MISLD_REGISTRATION_ID)
    );
CREATE TABLE
    EAADMIN.MS_BATCH_QUEUE
    (
        BATCH_QUEUE_ID BIGINT NOT NULL,
        BATCH_OBJECT BLOB(1048576) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKMSBATCHQUEUE PRIMARY KEY (BATCH_QUEUE_ID)
    );
CREATE TABLE
    EAADMIN.MS_REPORT_BATCH_QUEUE
    (
        BATCH_QUEUE_ID BIGINT NOT NULL,
        CUSTOMER_ID BIGINT NOT NULL,
        BATCH_OBJECT BLOB(1048576) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKMSREPORTBATCHQUE PRIMARY KEY (BATCH_QUEUE_ID)
    );
CREATE TABLE
    EAADMIN.NON_INSTANCE
    (
        ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        SOFTWARE_ID BIGINT NOT NULL,
        MANUFACTURER_ID BIGINT NOT NULL,
        RESTRICTION VARCHAR(8) NOT NULL,
        CAPACITY_TYPE_CODE SMALLINT NOT NULL,
        BASE_ONLY SMALLINT NOT NULL,
        STATUS_ID BIGINT NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT CSNONINSTANCE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.NON_INSTANCE_H
    (
        ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        NON_INSTANCE_ID BIGINT NOT NULL,
        SOFTWARE_ID BIGINT NOT NULL,
        MANUFACTURER_ID BIGINT NOT NULL,
        RESTRICTION VARCHAR(8) NOT NULL,
        CAPACITY_TYPE_CODE SMALLINT NOT NULL,
        BASE_ONLY SMALLINT NOT NULL,
        STATUS_ID BIGINT NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT CSNONINSTANCEHT PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.NOTIFICATION
    (
        NOTIFICATION_ID BIGINT NOT NULL,
        CUSTOMER_ID BIGINT NOT NULL,
        NOTIFICATION_TYPE VARCHAR(64) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKNOTIFICATION PRIMARY KEY (NOTIFICATION_ID)
    );
CREATE TABLE
    EAADMIN.OTHER_SIGNATURE
    (
        ID BIGINT NOT NULL,
        BODY VARCHAR(2160) NOT NULL,
        TYPE VARCHAR(255),
        CONSTRAINT PKOTHERSIGNATURE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.OUTSOURCE_PROFILE
    (
        CUSTOMER_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL,
        ASSET_PROCESS_ID BIGINT NOT NULL,
        COUNTRY_ID BIGINT,
        OUTSOURCEABLE VARCHAR(3),
        COMMENT VARCHAR(256),
        APPROVER VARCHAR(128),
        RECORD_TIME TIMESTAMP,
        CURRENT VARCHAR(1),
        CREATION_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        UPDATE_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        CONSTRAINT PKOUTSOURCEPROFILE PRIMARY KEY (CUSTOMER_ID, ID)
    );
CREATE TABLE
    EAADMIN.PART_NUMBER
    (
        ID BIGINT NOT NULL,
        PART_NUMBER VARCHAR(255) NOT NULL,
        NAME VARCHAR(255) NOT NULL,
        IS_PVU SMALLINT NOT NULL,
        IS_SUB_CAP SMALLINT NOT NULL,
        READ_ONLY SMALLINT,
        CONSTRAINT PKPARTNUMBER PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.PART_NUMBER_PID
    (
        PART_NUMBER_ID BIGINT NOT NULL,
        PID_ID BIGINT NOT NULL,
        CONSTRAINT PKPARTNUMBERPID PRIMARY KEY (PART_NUMBER_ID, PID_ID)
    );
CREATE TABLE
    EAADMIN.PERSON_TEST
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(32),
        SURNAME VARCHAR(32),
        AGE SMALLINT
    );
CREATE TABLE
    EAADMIN.PERSON_TEST2
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(32),
        SURNAME VARCHAR(32),
        AGE SMALLINT
    );
CREATE TABLE
    EAADMIN.PERSON_TEST3
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(32),
        SURNAME VARCHAR(32),
        AGE SMALLINT
    );
CREATE TABLE
    EAADMIN.PID
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        PID VARCHAR(32) NOT NULL,
        CONSTRAINT PKPID PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.PLATFORM
    (
        ID SMALLINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        SWKBT_ID SMALLINT NOT NULL,
        NAME VARCHAR(255) NOT NULL,
        CONSTRAINT PKPLATFORM PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.POD
    (
        POD_ID BIGINT NOT NULL,
        POD_NAME VARCHAR(32) NOT NULL,
        CREATION_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        UPDATE_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        CONSTRAINT PKPOD PRIMARY KEY (POD_ID)
    );
CREATE TABLE
    EAADMIN.PRICE_LEVEL
    (
        PRICE_LEVEL_ID BIGINT NOT NULL,
        PRICE_LEVEL VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKPRICELEVEL PRIMARY KEY (PRICE_LEVEL_ID)
    );
CREATE TABLE
    EAADMIN.PRICE_REPORT_ARCHIVE
    (
        PRICE_REPORT_ARCHIVE_ID BIGINT NOT NULL,
        PRICE_REPORT_CYCLE_ID BIGINT NOT NULL,
        SPLA_NUMBER VARCHAR(16) NOT NULL,
        ESPLA_NUMBER VARCHAR(16) NOT NULL,
        PO_NUMBER VARCHAR(16) NOT NULL,
        PO_DATE DATE NOT NULL,
        USAGE_DATE DATE NOT NULL,
        ORDER_TYPE VARCHAR(16) NOT NULL,
        OFFERING_TYPE VARCHAR(16) NOT NULL,
        ACCOUNT_NUMBER BIGINT NOT NULL,
        CUSTOMER_NAME VARCHAR(64) NOT NULL,
        CUSTOMER_TYPE VARCHAR(64) NOT NULL,
        POD VARCHAR(32) NOT NULL,
        INDUSTRY VARCHAR(64) NOT NULL,
        SECTOR VARCHAR(64) NOT NULL,
        CUST_LICENSE_AGREEMENT_TYPE VARCHAR(16) NOT NULL,
        PRICE_LEVEL VARCHAR(1) NOT NULL,
        QUALIFIED_DISCOUNT VARCHAR(32) NOT NULL,
        COUNTRY VARCHAR(16) NOT NULL,
        NODE_NAME VARCHAR(64) NOT NULL,
        SERIAL_NUMBER VARCHAR(64) NOT NULL,
        MACHINE_TYPE VARCHAR(64) NOT NULL,
        MACHINE_MODEL VARCHAR(64) NOT NULL,
        SCAN_DATE TIMESTAMP NOT NULL,
        NODE_OWNER VARCHAR(16) NOT NULL,
        SOFTWARE_OWNER VARCHAR(16) NOT NULL,
        PROCESSOR_COUNT INTEGER NOT NULL,
        USER_COUNT INTEGER NOT NULL,
        AUTHENTICATED VARCHAR(1) NOT NULL,
        SKU VARCHAR(32) NOT NULL,
        LICENSE_TYPE VARCHAR(32) NOT NULL,
        PRODUCTDESCRIPTION VARCHAR(64) NOT NULL,
        LICENSE_AGREEMENT_TYPE VARCHAR(16) NOT NULL,
        SPLA_QUARTERLY_PRICE DECIMAL(12,2) NOT NULL,
        ESPLA_YEARLY_PRICE DECIMAL(12,2) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        LPID VARCHAR(16),
        MAJOR VARCHAR(16),
        CONSTRAINT PKPRICEREPORTARCHI PRIMARY KEY (PRICE_REPORT_ARCHIVE_ID)
    );
CREATE TABLE
    EAADMIN.PRICE_REPORT_CYCLE
    (
        PRICE_REPORT_CYCLE_ID BIGINT NOT NULL,
        CUSTOMER_ID BIGINT NOT NULL,
        APPROVER VARCHAR(32) NOT NULL,
        APPROVAL_TIME TIMESTAMP NOT NULL,
        PO_USER VARCHAR(32),
        PO_ENTRY_TIME TIMESTAMP,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CYCLE_STATUS VARCHAR(32) NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        PRICE_REPORT_STATUS VARCHAR(32) DEFAULT '' NOT NULL,
        PRICE_REPORT_STATUS_USER VARCHAR(32) DEFAULT '' NOT NULL,
        PRICE_REPORT_STATUS_TIMESTAMP TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        CONSTRAINT PKPRICEREPORTCYCLE PRIMARY KEY (PRICE_REPORT_CYCLE_ID)
    );
CREATE TABLE
    EAADMIN.PRIORITY_ISV_SW
    (
        ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        LEVEL VARCHAR(8) NOT NULL,
        CUSTOMER_ID BIGINT,
        MANUFACTURER_ID BIGINT NOT NULL,
        EVIDENCE_LOCATION VARCHAR(128) NOT NULL,
        STATUS_ID BIGINT NOT NULL,
        BUSINESS_JUSTIFICATION VARCHAR(256) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT CSPRIORITYISVSW PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.PRIORITY_ISV_SW_H
    (
        ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        PRIORITY_ISV_SW_ID BIGINT NOT NULL,
        LEVEL VARCHAR(8) NOT NULL,
        CUSTOMER_ID BIGINT,
        MANUFACTURER_ID BIGINT NOT NULL,
        EVIDENCE_LOCATION VARCHAR(128) NOT NULL,
        STATUS_ID BIGINT NOT NULL,
        BUSINESS_JUSTIFICATION VARCHAR(256) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT CSPRIORITYISVSWH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.PROCGRPS
    (
        MACHINE_TYPE_ID BIGINT NOT NULL,
        MODEL CHARACTER(20) NOT NULL,
        PROCGRPS_GROUP CHARACTER(3) NOT NULL,
        DESCRIPTION CHARACTER(20) NOT NULL,
        VENDOR CHARACTER(10) NOT NULL,
        UPDUSER CHARACTER(8) NOT NULL,
        UPDSTAMP TIMESTAMP NOT NULL,
        MSU DECIMAL(7,3) NOT NULL,
        PSLC_IND CHARACTER(1) NOT NULL,
        WLC_IND CHARACTER(1) NOT NULL,
        TOTAL_ENGINES DECIMAL(3,0) NOT NULL,
        ZOS_ENGINES DECIMAL(3,0) NOT NULL,
        EWLC_IND CHARACTER(1) NOT NULL,
        UPD_INTRANET_ID CHARACTER(60) NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKPROCGRPS PRIMARY KEY (MACHINE_TYPE_ID, MODEL, PROCGRPS_GROUP, VENDOR)
    );
CREATE TABLE
    EAADMIN.PRODUCT
    (
        ID BIGINT NOT NULL,
        MANUFACTURER_ID BIGINT NOT NULL,
        FUNCTION VARCHAR(255),
        PVU SMALLINT,
        LICENSE_TYPE SMALLINT,
        CONSTRAINT PKPRODUCT PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.PRODUCT_ALIAS
    (
        PRODUCT_ID BIGINT NOT NULL,
        ALIAS_ID BIGINT NOT NULL
    );
CREATE TABLE
    EAADMIN.PRODUCT_INFO
    (
        ID BIGINT NOT NULL,
        SOFTWARE_CATEGORY_ID BIGINT NOT NULL,
        PRIORITY INTEGER NOT NULL,
        LICENSABLE SMALLINT NOT NULL,
        CHANGE_JUSTIFICATION VARCHAR(128) NOT NULL,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKPRODUCTINFO PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.PRODUCT_INFO_H
    (
        PRODUCT_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL,
        SOFTWARE_CATEGORY_NAME VARCHAR(64) NOT NULL,
        PRIORITY INTEGER NOT NULL,
        LICENSABLE SMALLINT NOT NULL,
        CHANGE_JUSTIFICATION VARCHAR(128) NOT NULL,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKPRODINFOH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.PURCHASE_ORDER_REPORT
    (
        PURCHASE_ORDER_REPORT_ID BIGINT NOT NULL,
        CUSTOMER_ID BIGINT NOT NULL,
        LICENSE_AGREEMENT_TYPE_ID BIGINT NOT NULL,
        TOTAL_PRICE DECIMAL(12,2) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKPURCHASEORDERRE PRIMARY KEY (PURCHASE_ORDER_REPORT_ID)
    );
CREATE TABLE
    EAADMIN.PVU
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        PROCESSOR_BRAND VARCHAR(64) NOT NULL,
        PROCESSOR_MODEL VARCHAR(64) NOT NULL,
        CONSTRAINT PKPVU PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.PVU_INFO
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        PVU_ID BIGINT NOT NULL,
        PROCESSOR_TYPE VARCHAR(64) NOT NULL,
        VALUE_UNITS_PER_CORE INTEGER NOT NULL,
        PROCESSOR_ARCHITECTURES VARCHAR(32) NOT NULL,
        SERVER_VENDOR VARCHAR(32) NOT NULL,
        SERVER_BRAND VARCHAR(32) NOT NULL,
        PROCESSOR_VENDOR VARCHAR(32) NOT NULL,
        START_DATE DATE NOT NULL,
        END_DATE DATE NOT NULL,
        STATUS VARCHAR(16) NOT NULL,
        CONSTRAINT PKPVUINFO PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.PVU_MAP
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        PROCESSOR_BRAND VARCHAR(64) NOT NULL,
        PROCESSOR_MODEL CHARACTER(20) NOT NULL,
        PVU_ID BIGINT NOT NULL,
        MACHINE_TYPE_ID BIGINT NOT NULL,
        CONSTRAINT PKPVUMAP PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.QUALIFIED_DISCOUNT
    (
        QUALIFIED_DISCOUNT_ID BIGINT NOT NULL,
        QUALIFIED_DISCOUNT VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKQUALIFIEDDISCOU PRIMARY KEY (QUALIFIED_DISCOUNT_ID)
    );
CREATE TABLE
    EAADMIN.RECONCILE
    (
        INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        RECONCILE_TYPE_ID SMALLINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        PARENT_INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        MACHINE_LEVEL SMALLINT NOT NULL,
        ALLOCATION_METHODOLOGY_ID BIGINT,
        CONSTRAINT PKRECONCILE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RECONCILE_H
    (
        INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        RECONCILE_TYPE_ID SMALLINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        PARENT_INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        MACHINE_LEVEL SMALLINT NOT NULL,
        RECONCILE_H SMALLINT DEFAULT 0 NOT NULL,
        MANUAL_BREAK SMALLINT NOT NULL,
        ALLOCATION_METHODOLOGY_ID BIGINT,
        CONSTRAINT PKRECONCILEH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RECONCILE_TYPE
    (
        ID SMALLINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(64) NOT NULL,
        IS_MANUAL SMALLINT NOT NULL,
        CONSTRAINT PKRECONCILETYPE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RECONCILE_USED_LICENSE
    (
        RECONCILE_ID BIGINT NOT NULL,
        USED_LICENSE_ID BIGINT NOT NULL,
        CONSTRAINT PKRECONCILEUSEDLIC PRIMARY KEY (RECONCILE_ID, USED_LICENSE_ID)
    );
CREATE TABLE
    EAADMIN.RECON_CUSTOMER
    (
        CUSTOMER_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        ACTION VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKRECONCUSTOMER PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RECON_CUSTOMER_LOG
    (
        CUSTOMER_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        HW_COUNT INTEGER NOT NULL,
        HW_AVG DECIMAL(6,3) NOT NULL,
        HW_LPAR_COUNT INTEGER NOT NULL,
        HW_LPAR_AVG DECIMAL(6,3) NOT NULL,
        SW_LPAR_COUNT INTEGER NOT NULL,
        SW_LPAR_AVG DECIMAL(6,3) NOT NULL,
        LIC_COUNT INTEGER NOT NULL,
        LIC_AVG DECIMAL(6,3) NOT NULL,
        DURATION INTEGER NOT NULL,
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKRECONCUSTOMERLOG PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RECON_CUSTOMER_SW
    (
        CUSTOMER_ID BIGINT NOT NULL,
        SOFTWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        ACTION VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKRECONCUSTOMERSW PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RECON_HARDWARE
    (
        CUSTOMER_ID BIGINT NOT NULL,
        HARDWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        ACTION VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKRECONHARDWARE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RECON_HS_COMPOSITE
    (
        CUSTOMER_ID BIGINT NOT NULL,
        HW_SW_COMPOSITE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        ACTION VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKRECONHSCOMPOSITE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RECON_HW_LPAR
    (
        CUSTOMER_ID BIGINT NOT NULL,
        HARDWARE_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        ACTION VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKRECONHWLPAR PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RECON_INSTALLED_SW
    (
        CUSTOMER_ID BIGINT NOT NULL,
        INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        ACTION VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKRECONINSTALLEDSW PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RECON_LICENSE
    (
        CUSTOMER_ID BIGINT NOT NULL,
        LICENSE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        ACTION VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKRECONLICENSE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RECON_PRIORITY_ISV_SW
    (
        CUSTOMER_ID BIGINT,
        MANUFACTURER_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        ACTION VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL
    );
CREATE TABLE
    EAADMIN.RECON_PVU
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        PROCESSOR_BRAND VARCHAR(16) NOT NULL,
        PROCESSOR_MODEL CHARACTER(20) NOT NULL,
        ACTION VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        MACHINE_TYPE_ID BIGINT NOT NULL,
        CONSTRAINT PKRECONPVU PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RECON_SOFTWARE
    (
        SOFTWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        ACTION VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKRECONSOFTWARE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RECON_SW_LPAR
    (
        CUSTOMER_ID BIGINT NOT NULL,
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        ACTION VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKRECONSWLPAR PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.REGION
    (
        GEOGRAPHY_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL,
        NAME VARCHAR(64) NOT NULL,
        CREATION_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        UPDATE_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        CONSTRAINT PKREGION PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.REGISTRY
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        KEY VARCHAR(255) NOT NULL,
        VALUE VARCHAR(255),
        TYPE VARCHAR(8) NOT NULL,
        CONSTRAINT PKREGISTRY PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.REGISTRY_SIGNATURE
    (
        ID BIGINT NOT NULL,
        OPERATOR VARCHAR(3) NOT NULL,
        CONSTRAINT PKREGISTRYSIG PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.REGISTRY_SIGNATURE_REGISTRY
    (
        REGISTRY_SIGNATURE_ID BIGINT NOT NULL,
        REGISTRY_ID BIGINT NOT NULL,
        CONSTRAINT PKREGSIGREG PRIMARY KEY (REGISTRY_SIGNATURE_ID, REGISTRY_ID)
    );
CREATE TABLE
    EAADMIN.RELATIONSHIP
    (
        ID BIGINT NOT NULL,
        SOURCE_SOFTWARE_ITEM_ID BIGINT NOT NULL,
        SINK_SOFTWARE_ITEM_ID BIGINT NOT NULL,
        TYPE VARCHAR(16),
        CONSTRAINT PKRELATIONSHIP PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RELEASE
    (
        ID BIGINT NOT NULL,
        MANUFACTURER_ID BIGINT NOT NULL,
        RELEASE VARCHAR(255),
        IDENTIFIER VARCHAR(255),
        VERSION_ID BIGINT,
        CONSTRAINT PKRELEASE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.RELEASE_CVERSIONID
    (
        RELEASE_ID BIGINT NOT NULL,
        C_VERSION_ID_ID BIGINT NOT NULL,
        CONSTRAINT PKRELCVERSIONID PRIMARY KEY (RELEASE_ID, C_VERSION_ID_ID)
    );
CREATE TABLE
    EAADMIN.REPORT_DELIVERY_TRACKING
    (
        ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        CUSTOMER_ID BIGINT NOT NULL,
        LAST_DELIVERY TIMESTAMP NOT NULL,
        REPORTING_CYCLE VARCHAR(32) NOT NULL,
        NEXT_DELIVERY TIMESTAMP NOT NULL,
        QMX_REFERENCE VARCHAR(225) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT CSIDREPDTRACK PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.REPORT_DELIVERY_TRACKING_H
    (
        ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        REPORT_DELIVERY_TRACKING_ID BIGINT NOT NULL,
        CUSTOMER_ID BIGINT NOT NULL,
        LAST_DELIVERY TIMESTAMP NOT NULL,
        REPORTING_CYCLE VARCHAR(32) NOT NULL,
        NEXT_DELIVERY TIMESTAMP NOT NULL,
        QMX_REFERENCE VARCHAR(225) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT CSNONINSTANCEHT PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SA_PRODUCT
    (
        SOFTWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL,
        SA_PRODUCT VARCHAR(32) NOT NULL,
        VERSION VARCHAR(32),
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKSAPRODUCT PRIMARY KEY (SOFTWARE_ID, ID)
    );
CREATE TABLE
    EAADMIN.SCARLET_RECONCILE
    (
        ID BIGINT NOT NULL,
        LAST_VALIDATE_TIME TIMESTAMP NOT NULL,
        RECONCILE_MD5_HEX VARCHAR(50),
        CONSTRAINT CSSCARLETRECONCILE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SCHEDULE_F
    (
        ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        CUSTOMER_ID BIGINT NOT NULL,
        SOFTWARE_ID BIGINT,
        SOFTWARE_TITLE VARCHAR(256),
        SOFTWARE_NAME VARCHAR(128),
        MANUFACTURER VARCHAR(64) NOT NULL,
        SCOPE_ID BIGINT NOT NULL,
        SOURCE_ID BIGINT NOT NULL,
        SOURCE_LOCATION VARCHAR(128) NOT NULL,
        STATUS_ID BIGINT NOT NULL,
        BUSINESS_JUSTIFICATION VARCHAR(256) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        LEVEL VARCHAR(16),
        HW_OWNER VARCHAR(64),
        SERIAL VARCHAR(32),
        MACHINE_TYPE VARCHAR(8),
        HOSTNAME VARCHAR(255),
        SW_FINANCIAL_RESP VARCHAR(16),
        MANUFACTURER_NAME VARCHAR(255),
        CONSTRAINT PKSCHEDULEF PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SCHEDULE_F_H
    (
        ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        SCHEDULE_F_ID BIGINT NOT NULL,
        CUSTOMER_ID BIGINT NOT NULL,
        SOFTWARE_ID BIGINT NOT NULL,
        SOFTWARE_TITLE VARCHAR(256) NOT NULL,
        SOFTWARE_NAME VARCHAR(128) NOT NULL,
        MANUFACTURER VARCHAR(64) NOT NULL,
        SCOPE_ID BIGINT NOT NULL,
        SOURCE_ID BIGINT NOT NULL,
        SOURCE_LOCATION VARCHAR(128) NOT NULL,
        STATUS_ID BIGINT NOT NULL,
        BUSINESS_JUSTIFICATION VARCHAR(256) NOT NULL,
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        LEVEL VARCHAR(16),
        HW_OWNER VARCHAR(64),
        SERIAL VARCHAR(32),
        MACHINE_TYPE VARCHAR(8),
        HOSTNAME VARCHAR(255),
        SW_FINANCIAL_RESP VARCHAR(16),
        CONSTRAINT PKSCHEDULEFH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SCOPE
    (
        ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        DESCRIPTION VARCHAR(64) NOT NULL,
        NAME VARCHAR(16) NOT NULL,
        CONSTRAINT PKSCOPE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SCRT_RECORD
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        HARDWARE_ID BIGINT NOT NULL,
        YEAR INTEGER NOT NULL,
        MONTH INTEGER NOT NULL,
        CPC INTEGER NOT NULL,
        LPAR VARCHAR(64) NOT NULL,
        MSU INTEGER NOT NULL,
        SCRT_REPORT_FILE VARCHAR(64) NOT NULL,
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKSCRTRECORD PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SECTOR
    (
        SECTOR_ID BIGINT NOT NULL,
        SECTOR_NAME VARCHAR(255) NOT NULL,
        CREATION_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        UPDATE_DATE_TIME TIMESTAMP DEFAULT CURRENT TIMESTAMP NOT NULL,
        CONSTRAINT PKSECTOR PRIMARY KEY (SECTOR_ID)
    );
CREATE TABLE
    EAADMIN.SIGNATURE
    (
        ID BIGINT NOT NULL,
        C_VERSION_PLATFORM_ID BIGINT,
        CONFIDENCE_LEVEL SMALLINT,
        DISCOVERED_SOFTWARE_ITEM_ID BIGINT,
        PLATFORM_ID BIGINT,
        CONSTRAINT PKSIGNATURE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_CATEGORY
    (
        SOFTWARE_CATEGORY_ID BIGINT NOT NULL,
        SOFTWARE_CATEGORY_NAME VARCHAR(64) NOT NULL,
        CHANGE_JUSTIFICATION VARCHAR(128) NOT NULL,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKSWCATEGORY PRIMARY KEY (SOFTWARE_CATEGORY_ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_CATEGORY_H
    (
        SOFTWARE_CATEGORY_ID BIGINT NOT NULL,
        SOFTWARE_CATEGORY_H_ID BIGINT NOT NULL,
        SOFTWARE_CATEGORY_NAME VARCHAR(64) NOT NULL,
        CHANGE_JUSTIFICATION VARCHAR(128) NOT NULL,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKSWCATEGORYH PRIMARY KEY (SOFTWARE_CATEGORY_H_ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_DISCREPANCY_H
    (
        INSTALLED_SOFTWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        ACTION VARCHAR(64) NOT NULL,
        COMMENT VARCHAR(512) NOT NULL,
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKSWDISCREPANCYH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_FILTER
    (
        SOFTWARE_ID BIGINT NOT NULL,
        SOFTWARE_FILTER_ID BIGINT NOT NULL,
        SOFTWARE_NAME VARCHAR(128) NOT NULL,
        SOFTWARE_VERSION VARCHAR(64) NOT NULL,
        MAP_SOFTWARE_VERSION VARCHAR(64),
        END_OF_SUPPORT TIMESTAMP,
        OS_TYPE VARCHAR(32),
        CHANGE_JUSTIFICATION VARCHAR(128) NOT NULL,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKSOFTWAREFILTER PRIMARY KEY (SOFTWARE_FILTER_ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_FILTER_H
    (
        SOFTWARE_FILTER_ID BIGINT NOT NULL,
        SOFTWARE_ID BIGINT NOT NULL,
        SOFTWARE_FILTER_H_ID BIGINT NOT NULL,
        SOFTWARE_NAME VARCHAR(128) NOT NULL,
        SOFTWARE_VERSION VARCHAR(64) NOT NULL,
        MAP_SOFTWARE_VERSION VARCHAR(64),
        END_OF_SUPPORT TIMESTAMP,
        OS_TYPE VARCHAR(32),
        CHANGE_JUSTIFICATION VARCHAR(128) NOT NULL,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKSOFTWAREFILTERH PRIMARY KEY (SOFTWARE_FILTER_H_ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_ITEM
    (
        ID BIGINT NOT NULL,
        NAME VARCHAR(255),
        END_OF_SUPPORT TIMESTAMP,
        PRODUCT_ID VARCHAR(255),
        WEBSITE VARCHAR(1000),
        ACTIVATION_DATE TIMESTAMP,
        PRODUCT_ROLE VARCHAR(255),
        SUB_CAPACITY_LICENSING SMALLINT,
        IPLA VARCHAR(255),
        CONSTRAINT PKSOFTWAREITEM PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_ITEM_PID
    (
        SOFTWARE_ITEM_ID BIGINT NOT NULL,
        PID_ID BIGINT NOT NULL,
        CONSTRAINT PKSOFTWAREITEMPID PRIMARY KEY (SOFTWARE_ITEM_ID, PID_ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_LPAR
    (
        CUSTOMER_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        NAME VARCHAR(255) NOT NULL,
        MODEL VARCHAR(128),
        BIOS_SERIAL VARCHAR(128),
        PROCESSOR_COUNT INTEGER NOT NULL,
        SCANTIME TIMESTAMP,
        ACQUISITION_TIME TIMESTAMP,
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        OBJECT_ID VARCHAR(128),
        COMPUTER_ID VARCHAR(255) NOT NULL,
        OS_NAME VARCHAR(128),
        OS_TYPE VARCHAR(128),
        OS_MAJOR_VERS INTEGER,
        OS_MINOR_VERS INTEGER,
        OS_SUB_VERS VARCHAR(32),
        OS_INST_DATE TIMESTAMP,
        USER_NAME VARCHAR(255),
        BIOS_MANUFACTURER VARCHAR(64),
        BIOS_MODEL VARCHAR(64),
        SERVER_TYPE VARCHAR(64),
        TECH_IMG_ID VARCHAR(64),
        EXT_ID CHARACTER(8),
        MEMORY INTEGER,
        DISK INTEGER,
        DEDICATED_PROCESSORS INTEGER,
        TOTAL_PROCESSORS INTEGER,
        SHARED_PROCESSORS INTEGER,
        PROCESSOR_TYPE INTEGER,
        SHARED_PROC_BY_CORES INTEGER,
        DEDICATED_PROC_BY_CORES INTEGER,
        TOTAL_PROC_BY_CORES INTEGER,
        ALIAS VARCHAR(120),
        PHYSICAL_TOTAL_KB INTEGER,
        VIRTUAL_MEMORY INTEGER,
        PHYSICAL_FREE_MEMORY INTEGER,
        VIRTUAL_FREE_MEMORY INTEGER,
        NODE_CAPACITY VARCHAR(64),
        LPAR_CAPACITY VARCHAR(64),
        BIOS_DATE TIMESTAMP,
        BIOS_SERIAL_NUMBER VARCHAR(64),
        BIOS_UNIQUE_ID VARCHAR(36),
        BOARD_SERIAL VARCHAR(64),
        CASE_SERIAL VARCHAR(64),
        CASE_ASSET_TAG VARCHAR(64),
        POWER_ON_PASSWORD VARCHAR(64),
        COUNTRY_CODE_ID BIGINT,
        COMMENT VARCHAR(255),
        SYSPLEX VARCHAR(8),
        CONSTRAINT PKSOFTWARELPAR PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_LPAR_ADC
    (
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        EP_NAME VARCHAR(64) NOT NULL,
        EP_OID VARCHAR(50),
        IP_ADDRESS VARCHAR(15),
        CUST CHARACTER(3),
        LOC CHARACTER(3),
        GU CHARACTER(10),
        SERVER_TYPE CHARACTER(1),
        SESDR_LOCATION CHARACTER(15),
        SESDR_BP_USING CHARACTER(12),
        SESDR_SYSTID CHARACTER(8),
        CONSTRAINT PKSOFTWARELPARADC PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_LPAR_EFF
    (
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        PROCESSOR_COUNT INTEGER,
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKSOFTWARELPAREFF PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_LPAR_EFF_H
    (
        SOFTWARE_LPAR_EFF_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        PROCESSOR_COUNT INTEGER,
        ACTION VARCHAR(64) NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        CONSTRAINT PKSOFTWARELPAREFFH PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_LPAR_HDISK
    (
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        SERIAL_NUMBER VARCHAR(64) NOT NULL,
        MODEL VARCHAR(254) NOT NULL,
        HDISK_SIZE_MB INTEGER NOT NULL,
        MANUFACTURER VARCHAR(128),
        STORAGE_TYPE VARCHAR(64),
        CONSTRAINT PKSOFTWARELPARHDIS PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_LPAR_IP_ADDRESS
    (
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
        IP_ADDRESS VARCHAR(128) NOT NULL,
        IP_HOSTNAME VARCHAR(64),
        IP_DOMAIN VARCHAR(64),
        IP_SUBNET VARCHAR(128),
        GATEWAY VARCHAR(254),
        PRIMARY_DNS VARCHAR(40),
        SECONDARY_DNS VARCHAR(40),
        IS_DHCP CHARACTER(1),
        INSTANCE_ID INTEGER,
        PERM_MAC_ADDRESS VARCHAR(64),
        IPV6_ADDRESS VARCHAR(64),
        CONSTRAINT PKSWLPARIPADDRESS PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_LPAR_MEM_MOD
    (
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        INST_MEM_ID INTEGER NOT NULL,
        MODULE_SIZE_MB INTEGER,
        MAX_MODULE_SIZE_MB INTEGER,
        SOCKET_NAME VARCHAR(24),
        PACKAGING VARCHAR(16),
        MEM_TYPE VARCHAR(48),
        CONSTRAINT PKSOFTWARELPARMEMM PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_LPAR_PROCESSOR
    (
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        PROCESSOR_NUM INTEGER NOT NULL,
        MANUFACTURER VARCHAR(128),
        MODEL VARCHAR(200),
        MAX_SPEED INTEGER,
        BUS_SPEED INTEGER,
        SERIAL_NUMBER VARCHAR(64),
        IS_ACTIVE CHARACTER(1),
        NUM_BOARDS INTEGER,
        NUM_MODULES INTEGER,
        PVU BIGINT,
        CACHE VARCHAR(16),
        CURRENT_SPEED INTEGER,
        CONSTRAINT PKSOFTWARELPARPROC PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_SIGNATURE
    (
        SOFTWARE_ID BIGINT NOT NULL,
        SOFTWARE_SIGNATURE_ID BIGINT NOT NULL,
        TCM_ID VARCHAR(32),
        FILE_NAME VARCHAR(255) NOT NULL,
        FILE_SIZE INTEGER NOT NULL,
        SOFTWARE_VERSION VARCHAR(32),
        SIGNATURE_SOURCE VARCHAR(32),
        CHECKSUM_QUICK VARCHAR(8),
        CHECKSUM_CRC32 VARCHAR(8),
        CHECKSUM_MD5 VARCHAR(32),
        END_OF_SUPPORT TIMESTAMP,
        OS_TYPE VARCHAR(32),
        CHANGE_JUSTIFICATION VARCHAR(128) NOT NULL,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKSWSIGNATURE PRIMARY KEY (SOFTWARE_SIGNATURE_ID)
    );
CREATE TABLE
    EAADMIN.SOFTWARE_SIGNATURE_H
    (
        SOFTWARE_SIGNATURE_ID BIGINT NOT NULL,
        SOFTWARE_ID BIGINT NOT NULL,
        SOFTWARE_SIGNATURE_H_ID BIGINT NOT NULL,
        TCM_ID VARCHAR(32),
        FILE_NAME VARCHAR(255) NOT NULL,
        FILE_SIZE INTEGER NOT NULL,
        SOFTWARE_VERSION VARCHAR(32),
        SIGNATURE_SOURCE VARCHAR(32),
        CHECKSUM_QUICK VARCHAR(8),
        CHECKSUM_CRC32 VARCHAR(8),
        CHECKSUM_MD5 VARCHAR(32),
        END_OF_SUPPORT TIMESTAMP,
        OS_TYPE VARCHAR(32),
        CHANGE_JUSTIFICATION VARCHAR(128) NOT NULL,
        COMMENTS VARCHAR(255),
        REMOTE_USER VARCHAR(32) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKSWSIGNATUREH PRIMARY KEY (SOFTWARE_SIGNATURE_H_ID)
    );
CREATE TABLE
    EAADMIN.SOURCE
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        DESCRIPTION VARCHAR(64) NOT NULL,
        CONSTRAINT PKSOURCE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.STATUS
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        DESCRIPTION VARCHAR(64) NOT NULL,
        CONSTRAINT PKSTATUS PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SWASSET_QUEUE
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        SOFTWARE_LPAR_ID BIGINT NOT NULL,
        CUSTOMER_ID BIGINT NOT NULL,
        HOSTNAME VARCHAR(255) NOT NULL,
        RECORD_TIME TIMESTAMP,
        REMOTE_USER VARCHAR(64),
        TYPE VARCHAR(16) DEFAULT 'TCM' NOT NULL,
        DELETED SMALLINT DEFAULT 0 NOT NULL,
        COMMENTS VARCHAR(255),
        CONSTRAINT PKSWASSETQUEUE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.SYSTEM_SCHEDULE_STATUS
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        NAME VARCHAR(64) NOT NULL,
        COMMENTS VARCHAR(255) NOT NULL,
        START_TIME TIMESTAMP NOT NULL,
        END_TIME TIMESTAMP,
        REMOTE_USER VARCHAR(32) NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKSYSSCHEDSTATUS PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.TIME_DIMENSION
    (
        DAY_KEY INTEGER NOT NULL,
        DAY_DATE DATE NOT NULL,
        MONTH_KEY INTEGER NOT NULL,
        CURRENT_MONTH SMALLINT NOT NULL,
        QUARTER_KEY INTEGER NOT NULL,
        CURRENT_QUARTER SMALLINT NOT NULL,
        CURRENT_YEAR SMALLINT NOT NULL,
        DAY_OF_WEEK SMALLINT NOT NULL,
        DAY_OF_MONTH SMALLINT NOT NULL,
        DAYS_IN_MONTH SMALLINT NOT NULL,
        DAY_OF_YEAR SMALLINT NOT NULL,
        WEEK_OF_MONTH SMALLINT NOT NULL,
        WEEK_OF_QUARTER SMALLINT NOT NULL,
        WEEK_OF_YEAR SMALLINT NOT NULL,
        WEEKDAY_EN VARCHAR(120) NOT NULL,
        WEEKDAY_ID VARCHAR(120) NOT NULL,
        MONTH_EN VARCHAR(125) NOT NULL,
        MONTH_ID VARCHAR(125)
    );
CREATE TABLE
    EAADMIN.USED_LICENSE
    (
        ID BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY,
        LICENSE_ID BIGINT NOT NULL,
        USED_QUANTITY INTEGER NOT NULL,
        CAPACITY_TYPE_ID SMALLINT NOT NULL,
        CONSTRAINT PKUSEDLICENSE PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.VARIATION
    (
        ID BIGINT NOT NULL,
        VARIATION VARCHAR(255) NOT NULL,
        ACTIVATION_DATE TIMESTAMP,
        RELEASE_ID BIGINT,
        CONSTRAINT PKVARIATION PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.VERSION
    (
        ID BIGINT NOT NULL,
        MANUFACTURER_ID BIGINT NOT NULL,
        IDENTIFIER VARCHAR(255),
        VERSION INTEGER,
        PRODUCT_ID BIGINT NOT NULL,
        CONSTRAINT PKVERSION PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.VM_PRODUCT
    (
        SOFTWARE_ID BIGINT NOT NULL,
        ID BIGINT NOT NULL,
        VM_PRODUCT VARCHAR(32) NOT NULL,
        VERSION VARCHAR(32),
        REMOTE_USER VARCHAR(64) NOT NULL,
        RECORD_TIME TIMESTAMP NOT NULL,
        STATUS VARCHAR(32) NOT NULL,
        CONSTRAINT PKVMPRODUCT PRIMARY KEY (ID)
    );
CREATE TABLE
    EAADMIN.XSLMID_SIGNATURE
    (
        ID BIGINT NOT NULL,
        FEATURE_ID VARCHAR(255) NOT NULL,
        PRODUCT_ID VARCHAR(255) NOT NULL,
        PUBLISHER_ID VARCHAR(255) NOT NULL,
        VERSION_ID VARCHAR(255) NOT NULL,
        CONSTRAINT PKXSLMIDSIGNATURE PRIMARY KEY (ID)
    );
ALTER TABLE
    EAADMIN.ACCOUNT_POOL ADD CONSTRAINT MASTER_NE_MEMBER CHECK (MASTER_ACCOUNT_ID !=
    MEMBER_ACCOUNT_ID);
ALTER TABLE
    EAADMIN.ADVISE_PARTITION ADD FOREIGN KEY (RUN_ID) REFERENCES ADVISE_INSTANCE (START_TIME)
ON
DELETE
    CASCADE;
ALTER TABLE
    EAADMIN.ADVISE_TABLE ADD FOREIGN KEY (RUN_ID) REFERENCES ADVISE_INSTANCE (START_TIME)
ON
DELETE
    CASCADE;
ALTER TABLE
    EAADMIN.ALERT_CAUSE ADD CONSTRAINT FKALERTCAUSE FOREIGN KEY (ALERT_CAUSE_RESPONSIBILITY_ID)
    REFERENCES ALERT_CAUSE_RESPONSIBILITY (ID)
ON
DELETE
    RESTRICT;
ALTER TABLE
    EAADMIN.ALERT_UNLICENSED_SW ADD CONSTRAINT INSTALLEDSOFTWARE FOREIGN KEY (INSTALLED_SOFTWARE_ID
    ) REFERENCES INSTALLED_SOFTWARE (ID)
ON
DELETE
    CASCADE;
ALTER TABLE
    EAADMIN.CAUSE_CODE_H ADD CONSTRAINT FKCAUSECODEH FOREIGN KEY (CAUSE_CODE_ID) REFERENCES
    CAUSE_CODE (ID)
ON
DELETE
    RESTRICT;
ALTER TABLE
    EAADMIN.EXPLAIN_ARGUMENT ADD FOREIGN KEY (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME,
    SOURCE_SCHEMA, SOURCE_VERSION, EXPLAIN_LEVEL, STMTNO, SECTNO) REFERENCES EXPLAIN_STATEMENT
    (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME, SOURCE_SCHEMA, SOURCE_VERSION, EXPLAIN_LEVEL,
    STMTNO, SECTNO)
ON
DELETE
    CASCADE;
ALTER TABLE
    EAADMIN.EXPLAIN_DIAGNOSTIC ADD FOREIGN KEY (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME,
    SOURCE_SCHEMA, SOURCE_VERSION, EXPLAIN_LEVEL, STMTNO, SECTNO) REFERENCES EXPLAIN_STATEMENT
    (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME, SOURCE_SCHEMA, SOURCE_VERSION, EXPLAIN_LEVEL,
    STMTNO, SECTNO)
ON
DELETE
    CASCADE;
ALTER TABLE
    EAADMIN.EXPLAIN_DIAGNOSTIC_DATA ADD FOREIGN KEY (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME,
    SOURCE_SCHEMA, SOURCE_VERSION, EXPLAIN_LEVEL, STMTNO, SECTNO, DIAGNOSTIC_ID) REFERENCES
    EXPLAIN_DIAGNOSTIC (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME, SOURCE_SCHEMA, SOURCE_VERSION
    , EXPLAIN_LEVEL, STMTNO, SECTNO, DIAGNOSTIC_ID)
ON
DELETE
    CASCADE;
ALTER TABLE
    EAADMIN.EXPLAIN_OPERATOR ADD FOREIGN KEY (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME,
    SOURCE_SCHEMA, SOURCE_VERSION, EXPLAIN_LEVEL, STMTNO, SECTNO) REFERENCES EXPLAIN_STATEMENT
    (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME, SOURCE_SCHEMA, SOURCE_VERSION, EXPLAIN_LEVEL,
    STMTNO, SECTNO)
ON
DELETE
    CASCADE;
ALTER TABLE
    EAADMIN.EXPLAIN_PREDICATE ADD FOREIGN KEY (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME,
    SOURCE_SCHEMA, SOURCE_VERSION, EXPLAIN_LEVEL, STMTNO, SECTNO) REFERENCES EXPLAIN_STATEMENT
    (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME, SOURCE_SCHEMA, SOURCE_VERSION, EXPLAIN_LEVEL,
    STMTNO, SECTNO)
ON
DELETE
    CASCADE;
ALTER TABLE
    EAADMIN.EXPLAIN_STATEMENT ADD FOREIGN KEY (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME,
    SOURCE_SCHEMA, SOURCE_VERSION) REFERENCES EXPLAIN_INSTANCE (EXPLAIN_REQUESTER, EXPLAIN_TIME,
    SOURCE_NAME, SOURCE_SCHEMA, SOURCE_VERSION)
ON
DELETE
    CASCADE;
ALTER TABLE
    EAADMIN.EXPLAIN_STREAM ADD FOREIGN KEY (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME,
    SOURCE_SCHEMA, SOURCE_VERSION, EXPLAIN_LEVEL, STMTNO, SECTNO) REFERENCES EXPLAIN_STATEMENT
    (EXPLAIN_REQUESTER, EXPLAIN_TIME, SOURCE_NAME, SOURCE_SCHEMA, SOURCE_VERSION, EXPLAIN_LEVEL,
    STMTNO, SECTNO)
ON
DELETE
    CASCADE;
ALTER TABLE
    EAADMIN.HARDWARE ADD CONSTRAINT ACCOUNT_NUMBER CHECK ("ACCOUNT_NUMBER" = (REPLACE
    (CUSTOMER_NUMBER, 'X', '')));
ALTER TABLE
    EAADMIN.IBM_BRAND ADD CONSTRAINT MANUFACTURER FOREIGN KEY (MANUFACTURER_ID) REFERENCES
    MANUFACTURER (ID)
ON
DELETE
    RESTRICT;
ALTER TABLE
    EAADMIN.INSTALLED_SOFTWARE ADD CONSTRAINT DISCREPANCYTYPE FOREIGN KEY (DISCREPANCY_TYPE_ID)
    REFERENCES DISCREPANCY_TYPE (ID)
ON
DELETE
    RESTRICT;
ALTER TABLE
    EAADMIN.INSTALLED_SOFTWARE ADD CONSTRAINT PRODUCTINFO FOREIGN KEY (SOFTWARE_ID) REFERENCES
    PRODUCT_INFO (ID)
ON
DELETE
    RESTRICT;
ALTER TABLE
    EAADMIN.INSTALLED_SOFTWARE ADD CONSTRAINT SOFTWARELPAR FOREIGN KEY (SOFTWARE_LPAR_ID)
    REFERENCES SOFTWARE_LPAR (ID)
ON
DELETE
    RESTRICT;
ALTER TABLE
    EAADMIN.LICENSE ADD CONSTRAINT ENVIRONMENT CHECK (ENVIRONMENT IN ('PRODUCTION',
                                                                      'DEVELOPMENT'));
ALTER TABLE
    EAADMIN.MAINFRAME_FEATURE ADD CONSTRAINT MAINFRAME_VERSION FOREIGN KEY (VERSION_ID) REFERENCES
    MAINFRAME_VERSION (ID)
ON
DELETE
    RESTRICT;
ALTER TABLE
    EAADMIN.MAINFRAME_FEATURE ADD CONSTRAINT SOFTWARE_ITEM FOREIGN KEY (ID) REFERENCES
    SOFTWARE_ITEM (ID)
ON
DELETE
    RESTRICT;
ALTER TABLE
    EAADMIN.MAINFRAME_VERSION ADD CONSTRAINT PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT
    (ID)
ON
DELETE
    RESTRICT;
ALTER TABLE
    EAADMIN.MISLD_DATES ADD CONSTRAINT DATE_TYPE CHECK (DATE_TYPE IN ('CURRENT_QTR',  'USAGE_DATE', 'PO_DATE'));
ALTER TABLE
    EAADMIN.PVU_INFO ADD CONSTRAINT STATUS CHECK (STATUS IN ('ACTIVE', 'INACTIVE'));
    
CREATE VIEW
    EAADMIN.SOFTWARE_H
    (
        SOFTWARE_ID,
        SOFTWARE_H_ID,
        MANUFACTURER_NAME,
        SOFTWARE_CATEGORY_NAME,
        SOFTWARE_NAME,
        PRIORITY,
        LEVEL,
        TYPE,
        CHANGE_JUSTIFICATION,
        COMMENTS,
        REMOTE_USER,
        RECORD_TIME,
        STATUS,
        VENDOR_MANAGED
    ) AS
    (
        SELECT
            p.id ,
            a.id ,
            m.name ,
            sc.software_category_name ,
            si.name ,
            pi.priority ,
            CASE
                WHEN pi.licensable = 1
                THEN 'LICENSABLE'
                ELSE 'UN-LICENSABLE'
            END ,
            CASE
                WHEN pi.software_category_id = 1051
                THEN 'O'
                ELSE 'A'
            END ,
            'SWKBT' ,
            'SWKBT' ,
            'SWKBT' ,
            kb.modification_time ,
            CASE
                WHEN kb.deleted != 1
                THEN 'ACTIVE'
                ELSE 'INACTIVE'
            END ,
            CASE
                WHEN UPPER(kb.custom_2) = 'TRUE'
                THEN 1
                ELSE 0
            END
        FROM
            eaadmin.kb_definition kb ,
            eaadmin.software_item si ,
            eaadmin.product p ,
            eaadmin.product_info pi ,
            eaadmin.product_alias pa ,
            eaadmin.alias a ,
            eaadmin.manufacturer m ,
            eaadmin.software_category sc
        WHERE
            kb.id = si.id
        AND si.id = p.id
        AND p.id = pi.id
        AND pi.id = pa.product_id
        AND pa.alias_id = a.id
        AND p.manufacturer_id = m.id
        AND pi.software_category_id = sc.software_category_id
    );
CREATE VIEW
    EAADMIN.V_INSTALLED_SOFTWARE
    (
        SOFTWARE_LPAR_ID,
        CUSTOMER_ID,
        NODENAME,
        MODEL,
        BIOS_SERIAL,
        SYSPLEX,
        PROCESSOR_COUNT,
        SCANTIME,
        OS_MINOR_VERS,
        OS_SUB_VERS,
        ACQUISITION_TIME,
        SOFTWARE_LPAR_STATUS,
        OS_INST_DATE,
        INSTALLED_SOFTWARE_ID,
        SOFTWARE_ID,
        USERS,
        INST_PROCESSOR_COUNT,
        AUTHENTICATED,
        INST_STATUS,
        DISCREPANCY_TYPE_ID,
        INSTALLED_PRODUCT_ID,
        PRODUCT_ID,
        BANK_ACCOUNT_ID,
        VERSION,
        PRODUCT_TYPE
    ) AS
SELECT
    a.id ,
    a.customer_id ,
    a.name ,
    a.model ,
    a.bios_serial ,
    a.sysplex ,
    a.processor_count ,
    a.scantime ,
    a.os_minor_vers ,
    a.os_sub_vers ,
    a.acquisition_time ,
    a.status ,
    a.os_inst_date ,
    b.id ,
    b.software_id ,
    b.users ,
    b.processor_count ,
    b.authenticated ,
    b.status ,
    b.discrepancy_type_id ,
    c.id ,
    c.software_filter_id ,
    c.bank_account_id ,
    d.map_software_version ,
    'FILTER'
FROM
    EAADMIN.software_lpar a ,
    EAADMIN.installed_software b ,
    EAADMIN.installed_filter c ,
    EAADMIN.software_filter d
WHERE
    a.id = b.software_lpar_id
AND b.id = c.installed_software_id
AND c.software_filter_id = d.software_filter_id
UNION ALL
SELECT
    a.id ,
    a.customer_id ,
    a.name ,
    a.model ,
    a.bios_serial ,
    a.sysplex ,
    a.processor_count ,
    a.scantime ,
    a.os_minor_vers ,
    a.os_sub_vers ,
    a.acquisition_time ,
    a.status ,
    a.os_inst_date ,
    b.id ,
    b.software_id ,
    b.users ,
    b.processor_count ,
    b.authenticated ,
    b.status ,
    b.discrepancy_type_id ,
    c.id ,
    c.software_signature_id ,
    c.bank_account_id ,
    d.software_version ,
    'SIGNATURE'
FROM
    EAADMIN.software_lpar a ,
    EAADMIN.installed_software b ,
    EAADMIN.installed_signature c ,
    EAADMIN.software_signature d
WHERE
    a.id = b.software_lpar_id
AND b.id = c.installed_software_id
AND c.software_signature_id = d.software_signature_id
UNION ALL
SELECT
    a.id ,
    a.customer_id ,
    a.name ,
    a.model ,
    a.bios_serial ,
    a.sysplex ,
    a.processor_count ,
    a.scantime ,
    a.os_minor_vers ,
    a.os_sub_vers ,
    a.acquisition_time ,
    a.status ,
    a.os_inst_date ,
    b.id ,
    b.software_id ,
    b.users ,
    b.processor_count ,
    b.authenticated ,
    b.status ,
    b.discrepancy_type_id ,
    c.id ,
    c.sa_product_id ,
    c.bank_account_id ,
    d.version ,
    'SOFTAUDIT'
FROM
    EAADMIN.software_lpar a ,
    EAADMIN.installed_software b ,
    EAADMIN.installed_sa_product c ,
    EAADMIN.sa_product d
WHERE
    a.id = b.software_lpar_id
AND b.id = c.installed_software_id
AND c.sa_product_id = d.id
UNION ALL
SELECT
    a.id ,
    a.customer_id ,
    a.name ,
    a.model ,
    a.bios_serial ,
    a.sysplex ,
    a.processor_count ,
    a.scantime ,
    a.os_minor_vers ,
    a.os_sub_vers ,
    a.acquisition_time ,
    a.status ,
    a.os_inst_date ,
    b.id ,
    b.software_id ,
    b.users ,
    b.processor_count ,
    b.authenticated ,
    b.status ,
    b.discrepancy_type_id ,
    c.id ,
    c.mainframe_feature_id ,
    c.bank_account_id ,
    CHAR(d.version),
    'TADZ'
FROM
    EAADMIN.software_lpar a ,
    EAADMIN.installed_software b ,
    EAADMIN.installed_tadz c ,
    EAADMIN.MAINFRAME_VERSION d
WHERE
    a.id = b.software_lpar_id
AND b.id = c.installed_software_id
AND c.MAINFRAME_FEATURE_ID=d.id
UNION ALL
SELECT
    a.id ,
    a.customer_id ,
    a.name ,
    a.model ,
    a.bios_serial ,
    a.sysplex ,
    a.processor_count ,
    a.scantime ,
    a.os_minor_vers ,
    a.os_sub_vers ,
    a.acquisition_time ,
    a.status ,
    a.os_inst_date ,
    b.id ,
    b.software_id ,
    b.users ,
    b.processor_count ,
    b.authenticated ,
    b.status ,
    b.discrepancy_type_id ,
    c.id ,
    c.mainframe_feature_id ,
    c.bank_account_id ,
    CHAR(d.version),
    'TADZ'
FROM
    EAADMIN.software_lpar a ,
    EAADMIN.installed_software b ,
    EAADMIN.installed_tadz c ,
    EAADMIN.MAINFRAME_VERSION d ,
    EAADMIN.MAINFRAME_FEATURE e
WHERE
    a.id = b.software_lpar_id
AND b.id = c.installed_software_id
AND c.MAINFRAME_FEATURE_ID=e.id
AND e.version_id=d.id
UNION ALL
SELECT
    a.id ,
    a.customer_id ,
    a.name ,
    a.model ,
    a.bios_serial ,
    a.sysplex ,
    a.processor_count ,
    a.scantime ,
    a.os_minor_vers ,
    a.os_sub_vers ,
    a.acquisition_time ,
    a.status ,
    a.os_inst_date ,
    b.id ,
    b.software_id ,
    b.users ,
    b.processor_count ,
    b.authenticated ,
    b.status ,
    b.discrepancy_type_id ,
    0 ,
    0 ,
    0 ,
    'MANUAL' ,
    'MANUAL'
FROM
    EAADMIN.software_lpar a ,
    EAADMIN.installed_software b
WHERE
    a.id = b.software_lpar_id
AND NOT EXISTS
    (
        SELECT
            1
        FROM
            EAADMIN.installed_filter c
        WHERE
            c.installed_software_id = b.id )
AND NOT EXISTS
    (
        SELECT
            1
        FROM
            EAADMIN.installed_signature d
        WHERE
            d.installed_software_id = b.id )
AND NOT EXISTS
    (
        SELECT
            1
        FROM
            EAADMIN.installed_sa_product e
        WHERE
            e.installed_software_id = b.id )
AND NOT EXISTS
    (
        SELECT
            1
        FROM
            EAADMIN.installed_tadz f
        WHERE
            f.installed_software_id = b.id ) WITH ur;
CREATE VIEW
    EAADMIN.V_LPAR_BANK_ACCOUNT
    (
        ID,
        SOFTWARE_LPAR_ID,
        BANK_ACCOUNT_ID
    ) AS
SELECT DISTINCT
    concat(CAST(a.id AS CHAR(32)) , CAST(a.bank_account_id AS CHAR(32))) AS id ,
    a.id                                                                 AS software_lpar_id ,
    a.bank_account_id                                                    AS bank_account_id
FROM
    (
        SELECT
            b.id ,
            d.bank_account_id
        FROM
            EAADMIN.software_lpar b ,
            EAADMIN.installed_software c ,
            EAADMIN.installed_signature d
        WHERE
            b.status = 'ACTIVE'
        AND c.status = 'ACTIVE'
        AND b.id = c.software_lpar_id
        AND c.id = d.installed_software_id
        UNION ALL
        SELECT
            b.id ,
            d.bank_account_id
        FROM
            EAADMIN.software_lpar b ,
            EAADMIN.installed_software c ,
            EAADMIN.installed_filter d
        WHERE
            b.status = 'ACTIVE'
        AND c.status = 'ACTIVE'
        AND b.id = c.software_lpar_id
        AND c.id = d.installed_software_id
        UNION ALL
        SELECT
            b.id ,
            d.bank_account_id
        FROM
            EAADMIN.software_lpar b ,
            EAADMIN.installed_software c ,
            EAADMIN.installed_sa_product d
        WHERE
            b.status = 'ACTIVE'
        AND c.status = 'ACTIVE'
        AND b.id = c.software_lpar_id
        AND c.id = d.installed_software_id
        UNION ALL
        SELECT
            b.id ,
            d.bank_account_id
        FROM
            EAADMIN.software_lpar b ,
            EAADMIN.installed_software c ,
            EAADMIN.installed_tadz d
        WHERE
            b.status = 'ACTIVE'
        AND c.status = 'ACTIVE'
        AND b.id = c.software_lpar_id
        AND c.id = d.installed_software_id
        UNION ALL
        SELECT
            b.id ,
            d.bank_account_id
        FROM
            EAADMIN.software_lpar b ,
            EAADMIN.installed_software c ,
            EAADMIN.installed_dorana_product d
        WHERE
            b.status = 'ACTIVE'
        AND c.status = 'ACTIVE'
        AND b.id = c.software_lpar_id
        AND c.id = d.installed_software_id
        UNION ALL
        SELECT
            b.id ,
            d.bank_account_id
        FROM
            EAADMIN.software_lpar b ,
            EAADMIN.installed_software c ,
            EAADMIN.installed_vm_product d
        WHERE
            b.status = 'ACTIVE'
        AND c.status = 'ACTIVE'
        AND b.id = c.software_lpar_id
        AND c.id = d.installed_software_id ) AS a;
CREATE VIEW
    EAADMIN.V_RECON_INVENTORY_QUEUE
    (
        PK,
        ID,
        FK,
        CUSTOMER_ID,
        ACTION,
        TABLE,
        REMOTE_USER,
        RECORD_TIME
    ) AS
SELECT
    'RECON_HARDWARE' || ACTION || CAST(ID AS CHAR(16)) ,
    ID ,
    HARDWARE_ID ,
    CUSTOMER_ID ,
    ACTION ,
    'RECON_HARDWARE' ,
    REMOTE_USER,
    RECORD_TIME
FROM
    EAADMIN.RECON_HARDWARE
UNION ALL
SELECT
    'RECON_HW_LPAR'|| ACTION || CAST(ID AS CHAR(16)) ,
    ID ,
    HARDWARE_LPAR_ID ,
    CUSTOMER_ID ,
    ACTION,
    'RECON_HW_LPAR' ,
    REMOTE_USER ,
    RECORD_TIME
FROM
    EAADMIN.RECON_HW_LPAR
UNION ALL
SELECT
    'RECON_SW_LPAR' || ACTION || CAST(ID AS CHAR(16)) ,
    ID ,
    SOFTWARE_LPAR_ID,
    CUSTOMER_ID ,
    ACTION ,
    'RECON_SW_LPAR' ,
    REMOTE_USER ,
    RECORD_TIME
FROM
    EAADMIN.RECON_SW_LPAR
UNION ALL
SELECT
    'RECON_INSTALLED_SW' || ACTION || CAST(ID AS CHAR(16)),
    ID ,
    INSTALLED_SOFTWARE_ID ,
    CUSTOMER_ID ,
    ACTION ,
    'RECON_INSTALLED_SW' ,
    REMOTE_USER,
    RECORD_TIME
FROM
    EAADMIN.RECON_INSTALLED_SW
WHERE
    ACTION <> 'LICENSING'
UNION ALL
SELECT
    'RECON_CUSTOMER' || ACTION || CAST(ID AS CHAR(16)) ,
    ID,
    CUSTOMER_ID ,
    CUSTOMER_ID ,
    ACTION ,
    'RECON_CUSTOMER' ,
    REMOTE_USER ,
    RECORD_TIME
FROM
    EAADMIN.RECON_CUSTOMER
UNION ALL
SELECT
    'RECON_LICENSE' || ACTION|| CAST(ID AS CHAR(16)) ,
    ID ,
    LICENSE_ID ,
    CUSTOMER_ID ,
    ACTION ,
    'RECON_LICENSE',
    REMOTE_USER ,
    RECORD_TIME
FROM
    EAADMIN.RECON_LICENSE
WHERE
    ACTION = 'DELETE'
UNION ALL
SELECT
    'RECON_CUSTOMER_SW'|| ACTION || CAST(ID AS CHAR(16)) ,
    ID ,
    SOFTWARE_ID ,
    CUSTOMER_ID ,
    ACTION,
    'RECON_CUSTOMER_SW' ,
    REMOTE_USER ,
    RECORD_TIME
FROM
    EAADMIN.RECON_CUSTOMER_SW;
CREATE VIEW
    EAADMIN.V_RECON_LICENSING_QUEUE
    (
        PK,
        ID,
        FK,
        CUSTOMER_ID,
        ACTION,
        TABLE,
        REMOTE_USER,
        RECORD_TIME
    ) AS
SELECT
    'RECON_INSTALLED_SW' || ACTION || CAST(ID AS CHAR(16)),
    ID ,
    INSTALLED_SOFTWARE_ID ,
    CUSTOMER_ID ,
    ACTION ,
    'RECON_INSTALLED_SW' ,
    REMOTE_USER,
    RECORD_TIME
FROM
    EAADMIN.RECON_INSTALLED_SW
WHERE
    ACTION = 'LICENSING'
UNION ALL
SELECT
    'RECON_LICENSE' || ACTION|| CAST(ID AS CHAR(16)) ,
    ID ,
    LICENSE_ID ,
    CUSTOMER_ID ,
    ACTION ,
    'RECON_LICENSE',
    REMOTE_USER ,
    RECORD_TIME
FROM
    EAADMIN.RECON_LICENSE
WHERE
    ACTION <> 'DELETE';
CREATE VIEW
    EAADMIN.V_RECON_QUEUE
    (
        PK,
        ID,
        FK,
        CUSTOMER_ID,
        ACTION,
        TABLE,
        REMOTE_USER,
        RECORD_TIME
    ) AS
SELECT
    'RECON_HARDWARE' || action || CAST(id AS CHAR(16)) ,
    id ,
    hardware_id ,
    customer_id ,
    action ,
    'RECON_HARDWARE' ,
    remote_user ,
    record_time
FROM
    eaadmin.recon_hardware
UNION ALL
SELECT
    'RECON_HW_LPAR' || action || CAST(id AS CHAR(16)) ,
    id ,
    hardware_lpar_id ,
    customer_id ,
    action ,
    'RECON_HW_LPAR' ,
    remote_user ,
    record_time
FROM
    eaadmin.recon_hw_lpar
UNION ALL
SELECT
    'RECON_SW_LPAR' || action || CAST(id AS CHAR(16)) ,
    id ,
    software_lpar_id ,
    customer_id ,
    action ,
    'RECON_SW_LPAR' ,
    remote_user ,
    record_time
FROM
    eaadmin.recon_sw_lpar
UNION ALL
SELECT
    'RECON_INSTALLED_SW' || action || CAST(id AS CHAR(16)) ,
    id ,
    installed_software_id ,
    customer_id ,
    action ,
    'RECON_INSTALLED_SW' ,
    remote_user ,
    record_time
FROM
    eaadmin.recon_installed_sw
UNION ALL
SELECT
    'RECON_HS_COMPOSITE' || action || CAST(id AS CHAR(16)) ,
    id ,
    hw_sw_composite_id ,
    customer_id ,
    action ,
    'RECON_HS_COMPOSITE' ,
    remote_user ,
    record_time
FROM
    eaadmin.recon_hs_composite
UNION ALL
SELECT
    'RECON_CUSTOMER' || action || CAST(id AS CHAR(16)) ,
    id ,
    customer_id ,
    customer_id ,
    action ,
    'RECON_CUSTOMER' ,
    remote_user ,
    record_time
FROM
    eaadmin.recon_customer
UNION ALL
SELECT
    'RECON_LICENSE' || action || CAST(id AS CHAR(16)) ,
    id ,
    license_id ,
    customer_id ,
    action ,
    'RECON_LICENSE' ,
    remote_user ,
    record_time
FROM
    eaadmin.recon_license
UNION ALL
SELECT
    'RECON_CUSTOMER_SW' || action || CAST(id AS CHAR(16)) ,
    id ,
    software_id ,
    customer_id ,
    action ,
    'RECON_CUSTOMER_SW' ,
    remote_user ,
    record_time
FROM
    eaadmin.recon_customer_sw;
CREATE VIEW
    EAADMIN.V_SOFTWARE_LPAR_PROCESSOR
    (
        ID,
        CUSTOMER_ID,
        NAME,
        STATUS,
        PROCESSOR_COUNT
    ) AS
SELECT
    SL.Id ,
    SL.Customer_Id ,
    SL.name,
    SL.status,
    COALESCE(NULLIF(SLE.Processor_Count, 0),SL.Processor_Count)
FROM
    EAADMIN.Software_Lpar SL
LEFT OUTER JOIN
    EAADMIN.Software_Lpar_Eff SLE
ON
    SLE.Software_Lpar_Id = SL.Id
AND SLE.Status = 'ACTIVE';

CREATE VIEW
    EAADMIN.V_ALERT_RED_AGING
    (
        ID,
        CUSTOMER_ID,
        ACCOUNT_NUMBER,
        CUSTOMER_NAME,
        CUSTOMER_TYPE,
        DISPLAY_NAME,
        ALERT_AGE,
        MACHINE_TYPE,
        SERIAL,
        HARDWARE_LPAR_NAME,
        SOFTWARE_LPAR_NAME,
        SOFTWARE_NAME
    ) AS
SELECT
    T.id ,
    T.customer_id ,
    c.account_number ,
    c.customer_name ,
    ct.customer_type_name ,
    T.display_name ,
    T.alert_age ,
    T.machine_type ,
    T.serial ,
    T.hardware_lpar_name ,
    T.software_lpar_name ,
    T.software_name
FROM
    (
        SELECT
            'HARDWARE' || CAST(H.ID AS CHAR(16))             AS id ,
            'HW W/O HW LPAR'                                 AS display_name ,
            h.customer_id                                    AS customer_id ,
            
            datediff(DAY,ah.creation_time,CURRENT_TIMESTAMP) AS alert_age ,
            mt.name                                          AS machine_type ,
            h.serial                                         AS serial ,
            ''                                               AS hardware_lpar_name ,
            ''                                               AS software_lpar_name ,
            ''                                               AS software_name
        FROM
            eaadmin.alert_hardware ah ,
            eaadmin.hardware h ,
            eaadmin.machine_type mt
        WHERE
            ah.open = 1
            
        AND datediff(DAY,ah.creation_time,CURRENT_TIMESTAMP) > 90
        AND ah.hardware_id = h.id
        AND h.machine_type_id = mt.id
        UNION ALL
        SELECT
            'ALERT_HARDWARE_CFGDATA' || CAST(H.ID AS CHAR(16))    AS id ,
            'SOM1b: HW Box Critical Configuration Data Populated' AS display_name ,
            h.customer_id                                         AS customer_id ,
            datediff(DAY,ah.creation_time,CURRENT_TIMESTAMP)      AS alert_age ,
            mt.name                                               AS machine_type ,
            h.serial                                              AS serial ,
            ''                                                    AS hardware_lpar_name ,
            ''                                                    AS software_lpar_name ,
            ''                                                    AS software_name
        FROM
            eaadmin.alert_hardware_cfgdata ah ,
            eaadmin.hardware h ,
            eaadmin.machine_type mt
        WHERE
            ah.open = 1
        AND datediff(DAY,ah.creation_time,CURRENT_TIMESTAMP) > 90
        AND ah.hardware_id = h.id
        AND h.machine_type_id = mt.id
        UNION ALL
        SELECT
            'HARDWARE_LPAR' || CAST(HL.ID AS CHAR(16))        AS id ,
            'HW LPAR W/O SW LPAR'                             AS display_name ,
            hl.customer_id                                    AS customer_id ,
            
            datediff(DAY,ahl.creation_time,CURRENT_TIMESTAMP) AS alert_age ,
            mt.name                                           AS machine_type ,
            h.serial                                          AS serial ,
            hl.name                                           AS hardware_lpar_name ,
            ''                                                AS software_lpar_name ,
            ''                                                AS software_name
        FROM
            eaadmin.alert_hw_lpar ahl ,
            eaadmin.hardware_lpar hl ,
            eaadmin.hardware h ,
            eaadmin.machine_type mt
        WHERE
            ahl.open = 1
        AND datediff(DAY,ahl.creation_time,CURRENT_TIMESTAMP) > 90
        AND ahl.hardware_lpar_id = hl.id
        AND hl.hardware_id = h.id
        AND h.machine_type_id = mt.id
        UNION ALL
        SELECT
            'SOFTWARE_LPAR' || CAST(SL.ID AS CHAR(16))        AS id ,
            'SW LPAR W/O HW LPAR'                             AS display_name ,
            sl.customer_id                                    AS customer_id ,
            datediff(DAY,asl.creation_time,CURRENT_TIMESTAMP) AS alert_age ,
            ''                                                AS machine_type ,
            ''                                                AS serial ,
            ''                                                AS hardware_lpar_name ,
            sl.name                                           AS software_lpar_name ,
            ''                                                AS software_name
        FROM
            eaadmin.alert_sw_lpar asl ,
            eaadmin.software_lpar sl
        WHERE
            asl.open = 1
        AND datediff(DAY,asl.creation_time,CURRENT_TIMESTAMP) > 90
        AND asl.software_lpar_id = sl.id
        UNION ALL
        SELECT
            'EXPIRED_SCAN' || CAST(SL.ID AS CHAR(16))                     AS id ,
            'OUTDATED SW LPAR'                                            AS display_name ,
            sl.customer_id                                                AS customer_id ,
            
            datediff(DAY,sl.scantime,CURRENT_TIMESTAMP) - c.scan_validity AS alert_age ,
            mt.name                                                       AS machine_type ,
            h.serial                                                      AS serial ,
            hl.name                                                       AS hardware_lpar_name ,
            sl.name                                                       AS software_lpar_name ,
            ''                                                            AS software_name
        FROM
            eaadmin.customer c ,
            eaadmin.alert_expired_scan aes ,
            eaadmin.software_lpar sl
        LEFT OUTER JOIN
            eaadmin.hw_sw_composite hsc
        ON
            hsc.software_lpar_id = sl.id
        LEFT OUTER JOIN
            eaadmin.hardware_lpar hl
        ON
            hsc.hardware_lpar_id = hl.id
        LEFT OUTER JOIN
            eaadmin.hardware h
        ON
            hl.hardware_id = h.id
        LEFT OUTER JOIN
            eaadmin.machine_type mt
        ON
            h.machine_type_id = mt.id
        WHERE
            aes.open = 1
        AND datediff(DAY,sl.scantime,CURRENT_TIMESTAMP) - c.scan_validity > 90
        AND aes.software_lpar_id = sl.id
        AND sl.customer_id = c.customer_id
        UNION ALL
        SELECT
            CASE
                WHEN aus.type = 'IBM'
                THEN 'UNLICENSED_IBM_SW'
                ELSE 'UNLICENSED_ISV_SW'
            END || CAST(inst.id AS CHAR(16)) AS id ,
            CASE
                WHEN aus.type = 'IBM'
                THEN 'UNLICENSED_IBM_SW'
                ELSE 'UNLICENSED_ISV_SW'
            END                                               AS display_name ,
            sl.customer_id                                    AS customer_id ,
           
            datediff(DAY,aus.creation_time,CURRENT_TIMESTAMP) AS alert_age ,
            mt.name                                           AS machine_type ,
            h.serial                                          AS serial ,
            hl.name                                           AS hardware_lpar_name ,
            sl.name                                           AS software_lpar_name ,
            si.name                                           AS software_name
        FROM
            eaadmin.alert_unlicensed_sw aus ,
            eaadmin.installed_software inst ,
            eaadmin.software_lpar sl ,
            eaadmin.hw_sw_composite hsc ,
            eaadmin.hardware_lpar hl ,
            eaadmin.hardware h ,
            eaadmin.machine_type mt ,
            eaadmin.software_item si
        WHERE
            aus.open = 1
        AND  datediff(DAY,aus.creation_time,CURRENT_TIMESTAMP) > 90
        AND aus.installed_software_id = inst.id
        AND inst.software_lpar_id = sl.id
        AND sl.id = hsc.software_lpar_id
        AND hl.id = hsc.hardware_lpar_id
        AND h.id = hl.hardware_id
        AND h.machine_type_id = mt.id
        AND inst.software_id = si.id ) AS T ,
    eaadmin.customer c ,
    eaadmin.customer_type ct
WHERE
    c.customer_id = T.customer_id
AND c.customer_type_id = ct.customer_type_id;

CREATE VIEW
    EAADMIN.V_ALERT_REPORT
    (
        PK,
        CUSTOMER_ID,
        OPEN,
        ASSIGNED,
        RED,
        YELLOW,
        GREEN,
        DISPLAY_NAME
    ) AS
SELECT
    'HARDWARE' || CAST(a.id AS CHAR(16)) ,
    b.customer_id ,
    a.open ,
    CASE
        WHEN a.remote_user = 'STAGING'
        THEN 0
        ELSE 1
    END AS assigned ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) > 90
        THEN 1
        ELSE 0
    END AS red ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) BETWEEN 46 AND 90
        THEN 1
        ELSE 0
    END AS yellow ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) BETWEEN 0 AND 45
        THEN 1
        ELSE 0
    END AS green ,
    'SOM1a: HW WITH HOSTNAME'
FROM
    EAADMIN.alert_hardware a ,
    EAADMIN.hardware b
WHERE
    a.hardware_id = b.id
UNION ALL
SELECT
    'HW_LPAR' || CAST(a.id AS CHAR(16)) ,
    b.customer_id ,
    a.open ,
    CASE
        WHEN a.remote_user = 'STAGING'
        THEN 0
        ELSE 1
    END AS assigned ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) > 90
        THEN 1
        ELSE 0
    END AS Red ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) BETWEEN 46 AND 90
        THEN 1
        ELSE 0
    END AS yellow ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) BETWEEN 0 AND 45
        THEN 1
        ELSE 0
    END AS green ,
    'SOM2a: HW LPAR WITH SW LPAR'
FROM
    EAADMIN.alert_hw_lpar a ,
    EAADMIN.hardware_lpar b
WHERE
    a.hardware_lpar_id = b.id
UNION ALL
SELECT
    'SW_LPAR' || CAST(a.id AS CHAR(16)) ,
    b.customer_id ,
    a.open ,
    CASE
        WHEN a.remote_user = 'STAGING'
        THEN 0
        ELSE 1
    END AS assigned ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) > 90
        THEN 1
        ELSE 0
    END AS Red ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) BETWEEN 46 AND 90
        THEN 1
        ELSE 0
    END AS yellow ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) BETWEEN 0 AND 45
        THEN 1
        ELSE 0
    END AS green ,
    'SOM2b: SW LPAR WITH HW LPAR'
FROM
    EAADMIN.alert_sw_lpar a ,
    EAADMIN.software_lpar b
WHERE
    a.software_lpar_id = b.id
UNION ALL
SELECT
    'EXP_SCAN' || CAST(a.id AS CHAR(16)) ,
    b.customer_id ,
    a.open ,
    CASE
        WHEN a.remote_user = 'STAGING'
        THEN 0
        ELSE 1
    END AS assigned ,
    CASE
        WHEN datediff(DAY,b.scantime,CURRENT TIMESTAMP) - c.scan_validity > 90
        THEN 1
        ELSE 0
    END AS Red ,
    CASE
        WHEN datediff(DAY,b.scantime,CURRENT TIMESTAMP) - c.scan_validity BETWEEN 46 AND 90
        THEN 1
        ELSE 0
    END AS Yellow ,
    CASE
        WHEN datediff(DAY,b.scantime,CURRENT TIMESTAMP) - c.scan_validity BETWEEN 0 AND 45
        THEN 1
        ELSE 0
    END AS Green ,
    'SOM2c: UNEXPIRED SW LPAR'
FROM
    EAADMIN.alert_expired_scan a ,
    EAADMIN.software_lpar b ,
    eaadmin.customer c
WHERE
    a.software_lpar_id = b.id
AND b.customer_id = c.customer_id
UNION ALL
SELECT
    CASE
        WHEN a.type = 'SCOPE'
        THEN 'SWISCOPE' || CAST(a.id AS CHAR(16))
        WHEN a.type = 'IBM'
        THEN 'SWIBM' || CAST(a.id AS CHAR(16))
        WHEN a.type = 'ISVPRIO'
        THEN 'SWISVPR' || CAST(a.id AS CHAR(16))
        ELSE 'SWISVNPR' || CAST(a.id AS CHAR(16))
    END ,
    c.customer_id ,
    a.open ,
    CASE
        WHEN a.remote_user = 'STAGING'
        THEN 0
        ELSE 1
    END AS assigned ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) > 90
        THEN 1
        ELSE 0
    END AS Red ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) BETWEEN 46 AND 90
        THEN 1
        ELSE 0
    END AS Yellow ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) BETWEEN 0 AND 45
        THEN 1
        ELSE 0
    END AS Green ,
    CASE
        WHEN a.type = 'IBM'
        THEN 'SOM4a: IBM SW INSTANCES REVIEWED'
        WHEN a.type = 'SCOPE'
        THEN 'SOM3: SW INSTANCES WITH DEFINED CONTRACT SCOPE'
        WHEN a.type = 'ISVPRIO'
        THEN 'SOM4b: PRIORITY ISV SW INSTANCES REVIEWED'
        ELSE 'SOM4c: ISV SW INSTANCES REVIEWED'
    END
FROM
    EAADMIN.alert_unlicensed_sw a ,
    EAADMIN.installed_software b ,
    EAADMIN.software_lpar c
WHERE
    a.installed_software_id = b.id
AND b.software_lpar_id = c.id
UNION ALL
SELECT
    'HWCFGDTA' || CAST(a.id AS CHAR(16)) ,
    x.customer_id ,
    a.open ,
    CASE
        WHEN a.remote_user = 'STAGING'
        THEN 0
        ELSE 1
    END AS assigned ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) > 90
        THEN 1
        ELSE 0
    END AS red ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) BETWEEN 46 AND 90
        THEN 1
        ELSE 0
    END AS yellow ,
    CASE
        WHEN datediff(DAY,a.creation_time,CURRENT TIMESTAMP) BETWEEN 0 AND 45
        THEN 1
        ELSE 0
    END AS green ,
    'SOM1b: HW BOX CRITICAL CONFIGURATION DATA POPULATED'
FROM
    EAADMIN.alert_hardware_cfgdata a ,
    EAADMIN.hardware b ,
    (
        SELECT DISTINCT
            hardware_id,
            customer_id
        FROM
            EAADMIN.hardware_lpar c
        WHERE
            status='ACTIVE'
        AND lpar_status='ACTIVE' ) x
WHERE
    a.hardware_id = b.id
AND b.id = x.hardware_id;

CREATE VIEW
    EAADMIN.V_ALERTS
    (
        PK,
        ID,
        FK_ID,
        CUSTOMER_ID,
        COMMENTS,
        REMOTE_USER,
        ALERT_AGE,
        CREATION_TIME,
        RECORD_TIME,
        OPEN,
        TYPE,
        DISPLAY_NAME,
        CAUSE_CODE_ALERT_TYPE,
        ALERT_TYPE_CODE,
        CC_TARGET_DATE,
        CC_OWNER,
        CC_UPDATE_TIME,
        CC_REMOTE_USER,
        CC_ID,
        ATC_STATUS,
        AC_NAME,
        AC_SHOW_GUI,
        AC_RESPONSIBILITY
    ) AS
SELECT
    'HARDWARE' || CAST(ah.id AS CHAR(16)) ,
    ah.id ,
    ah.hardware_id ,
    h.customer_id ,
    ah.comments ,
    ah.remote_user ,
    datediff(DAY,ah.creation_time,CURRENT_TIMESTAMP) AS ALERT_AGE ,
    ah.creation_time ,
    ah.record_time ,
    ah.open ,
    'HARDWARE' ,
    'SOM1a: HW WITH HOSTNAME',
    at.name,
    at.code,
    cc.target_date,
    cc.owner,
    cc.record_time,
    cc.remote_user,
    cc.id,
    atc.status,
    ac.name,
    ac.show_in_gui,
    acr.name
FROM
    EAADMIN.alert_hardware ah ,
    EAADMIN.hardware h,
    EAADMIN.cause_code cc,
    EAADMIN.alert_type at,
    EAADMIN.alert_type_cause atc,
    EAADMIN.alert_cause ac,
    EAADMIN.alert_cause_responsibility acr
WHERE
    ah.hardware_id =h.id
AND cc.alert_id=ah.id
AND cc.alert_type_id=at.id
AND atc.alert_type_id=at.id
AND ac.id=atc.alert_cause_id
AND acr.id=ac.alert_cause_responsibility_id
AND cc.alert_cause_id=ac.id
AND at.code='HARDWARE'
UNION ALL
SELECT
    'HWCFGDTA' || CAST(ahc.id AS CHAR(16)) ,
    ahc.id ,
    ahc.hardware_id ,
    x.customer_id ,
    ahc.comments ,
    ahc.remote_user ,
    datediff(DAY,ahc.creation_time,CURRENT_TIMESTAMP) AS ALERT_AGE ,
    ahc.creation_time ,
    ahc.record_time ,
    ahc.open ,
    'HWCFGDTA' ,
    'SOM1b: HW BOX CRITICAL CONFIGURATION DATA POPULATED',
    at.name,
    at.code,
    cc.target_date,
    cc.owner,
    cc.record_time,
    cc.remote_user,
    cc.id,
    atc.status,
    ac.name,
    ac.show_in_gui,
    acr.name
FROM
    EAADMIN.alert_hardware_cfgdata ahc ,
    EAADMIN.hardware h,
    (
        SELECT DISTINCT
            hardware_id,
            customer_id
        FROM
            EAADMIN.hardware_lpar
        WHERE
            status='ACTIVE'
        AND lpar_status = 'ACTIVE' ) x,
    EAADMIN.cause_code cc,
    EAADMIN.alert_type at,
    EAADMIN.alert_type_cause atc,
    EAADMIN.alert_cause ac,
    EAADMIN.alert_cause_responsibility acr
WHERE
    ahc.hardware_id=h.id
AND x.hardware_id = h.id
AND cc.alert_id=ahc.id
AND cc.alert_type_id=at.id
AND atc.alert_type_id=at.id
AND ac.id=atc.alert_cause_id
AND acr.id=ac.alert_cause_responsibility_id
AND cc.alert_cause_id=ac.id
AND at.code='HWCFGDTA'
UNION ALL
SELECT
    'HW_LPAR' || CAST(ahl.id AS CHAR(16)) ,
    ahl.id ,
    ahl.hardware_lpar_id ,
    hl.customer_id ,
    ahl.comments ,
    ahl.remote_user ,
    datediff(DAY,ahl.creation_time,CURRENT_TIMESTAMP) AS ALERT_AGE ,
    ahl.creation_time ,
    ahl.record_time ,
    ahl.open ,
    'HARDWARE_LPAR' ,
    'SOM2a: HW LPAR WITH SW LPAR',
    at.name,
    at.code,
    cc.target_date,
    cc.owner,
    cc.record_time,
    cc.remote_user,
    cc.id,
    atc.status,
    ac.name,
    ac.show_in_gui,
    acr.name
FROM
    EAADMIN.alert_hw_lpar ahl ,
    EAADMIN.hardware_lpar hl,
    EAADMIN.cause_code cc,
    EAADMIN.alert_type at,
    EAADMIN.alert_type_cause atc,
    EAADMIN.alert_cause ac,
    EAADMIN.alert_cause_responsibility acr
WHERE
    ahl.hardware_lpar_id= hl.id
AND cc.alert_id=ahl.id
AND cc.alert_type_id=at.id
AND atc.alert_type_id=at.id
AND ac.id=atc.alert_cause_id
AND acr.id=ac.alert_cause_responsibility_id
AND cc.alert_cause_id=ac.id
AND at.code='HW_LPAR'
UNION ALL
SELECT
    'SW_LPAR' || CAST(asl.id AS CHAR(16)) ,
    asl.id ,
    asl.software_lpar_id ,
    sl.customer_id ,
    asl.comments ,
    asl.remote_user ,
    datediff(DAY,asl.creation_time,CURRENT_TIMESTAMP) AS ALERT_AGE ,
    asl.creation_time ,
    asl.record_time ,
    asl.open ,
    'SOFTWARE_LPAR' ,
    'SOM2b: SW LPAR WITH HW LPAR' ,
    at.name,
    at.code,
    cc.target_date,
    cc.owner,
    cc.record_time,
    cc.remote_user,
    cc.id,
    atc.status,
    ac.name,
    ac.show_in_gui,
    acr.name
FROM
    EAADMIN.alert_sw_lpar asl ,
    EAADMIN.software_lpar sl,
    EAADMIN.cause_code cc,
    EAADMIN.alert_type at,
    EAADMIN.alert_type_cause atc,
    EAADMIN.alert_cause ac,
    EAADMIN.alert_cause_responsibility acr
WHERE
    asl.software_lpar_id = sl.id
AND cc.alert_id=asl.id
AND cc.alert_type_id=at.id
AND atc.alert_type_id=at.id
AND ac.id=atc.alert_cause_id
AND acr.id=ac.alert_cause_responsibility_id
AND cc.alert_cause_id=ac.id
AND at.code='SW_LPAR'
UNION ALL
SELECT
    'EXP_SCAN' || CAST(aes.id AS CHAR(16)) ,
    aes.id ,
    aes.software_lpar_id ,
    sl.customer_id ,
    aes.comments ,
    aes.remote_user ,
    datediff(DAY,sl.scantime,CURRENT_TIMESTAMP) - c.scan_validity AS ALERT_AGE ,
    aes.creation_time ,
    aes.record_time ,
    aes.open ,
    'EXPIRED_SCAN' ,
    'SOM2c: UNEXPIRED SW LPAR' ,
    at.name,
    at.code,
    cc.target_date,
    cc.owner,
    cc.record_time,
    cc.remote_user,
    cc.id,
    atc.status,
    ac.name,
    ac.show_in_gui,
    acr.name
FROM
    EAADMIN.alert_expired_scan aes ,
    EAADMIN.software_lpar sl ,
    eaadmin.customer c ,
    EAADMIN.cause_code cc,
    EAADMIN.alert_type at,
    EAADMIN.alert_type_cause atc,
    EAADMIN.alert_cause ac,
    EAADMIN.alert_cause_responsibility acr
WHERE
    sl.customer_id = c.customer_id
AND aes.software_lpar_id= sl.id
AND cc.alert_id=aes.id
AND cc.alert_type_id=at.id
AND atc.alert_type_id=at.id
AND ac.id=atc.alert_cause_id
AND acr.id=ac.alert_cause_responsibility_id
AND cc.alert_cause_id=ac.id
AND at.code='EXP_SCAN'
UNION ALL
SELECT
    CASE
        WHEN aus.type = 'IBM'
        THEN 'SWIBM' || CAST(aus.id AS CHAR(16))
        WHEN aus.type = 'SCOPE'
        THEN 'SWISCOPE' || CAST(aus.id AS CHAR(16))
        WHEN aus.type = 'ISVPRIO'
        THEN 'SWISVPR' || CAST(aus.id AS CHAR(16))
        ELSE 'SWISVNPR' || CAST(aus.id AS CHAR(16))
    END ,
    aus.id ,
    aus.installed_software_id ,
    sl.customer_id ,
    aus.comments ,
    aus.remote_user ,
    datediff(DAY,aus.creation_time,CURRENT_TIMESTAMP) AS ALERT_AGE ,
    aus.creation_time ,
    aus.record_time ,
    aus.open ,
    CASE
        WHEN aus.type = 'IBM'
        THEN 'SWIBM'
        WHEN aus.type = 'SCOPE'
        THEN 'SWISCOPE'
        WHEN aus.type = 'ISVPRIO'
        THEN 'SWISVPR'
        ELSE 'SWISVNPR'
    END ,
    CASE
        WHEN aus.type = 'IBM'
        THEN 'SOM4a: IBM SW INSTANCES REVIEWED'
        WHEN aus.type = 'SCOPE'
        THEN 'SOM3: SW INSTANCES WITH DEFINED CONTRACT SCOPE'
        WHEN aus.type = 'ISVPRIO'
        THEN 'SOM4b: PRIORITY ISV SW INSTANCES REVIEWED'
        ELSE 'SOM4c: ISV SW INSTANCES REVIEWED'
    END ,
    at.name,
    at.code,
    cc.target_date,
    cc.owner,
    cc.record_time,
    cc.remote_user,
    cc.id,
    atc.status,
    ac.name,
    ac.show_in_gui,
    acr.name
FROM
    EAADMIN.alert_unlicensed_sw aus ,
    EAADMIN.installed_software inst,
    eaadmin.software_lpar sl ,
    EAADMIN.cause_code cc,
    EAADMIN.alert_type at,
    EAADMIN.alert_type_cause atc,
    EAADMIN.alert_cause ac,
    EAADMIN.alert_cause_responsibility acr
WHERE
    inst.software_lpar_id = sl.id
AND aus.installed_software_id= inst.id
AND cc.alert_id=aus.id
AND cc.alert_type_id=at.id
AND atc.alert_type_id=at.id
AND ac.id=atc.alert_cause_id
AND acr.id=ac.alert_cause_responsibility_id
AND cc.alert_cause_id=ac.id
AND at.code IN ( 'NOLIC',
                'SWISCOPE',
                'SWIBM',
                'SWISVPR',
                'SWISVNPR' );

CREATE TABLE 
   EAADMIN.MQT_OP_METRICS_SWTRACKING (
ID VARCHAR(41) NOT NULL,
CUSTOMER_ID BIGINT NOT NULL,
DISPLAY_NAME VARCHAR(27) NOT NULL,
ASSET_TYPE VARCHAR(16),
RECORD_TIME TIMESTAMP NOT NULL,
ASSIGNED INTEGER,
RED INTEGER,                    
YELLOW INTEGER,                      
GREEN INTEGER,                    
RED91 INTEGER,                    
RED121 INTEGER,                    
RED151 INTEGER,                   
RED181 INTEGER,                    
RED366 INTEGER,                     
ASSET_TOTAL INTEGER   
);  